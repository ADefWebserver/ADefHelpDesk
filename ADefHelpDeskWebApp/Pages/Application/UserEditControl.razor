@inherits OwningComponentBase
@using System
@using System.Collections.Generic
@using System.Linq
@using System.Linq.Dynamic.Core
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Radzen
@using Radzen.Blazor
@using AdefHelpDeskBase.Models
@using AdefHelpDeskBase.Models.DataContext
@using AdefHelpDeskBase.Controllers
@using ADefHelpDeskWebApp.Models
@using ADefHelpDeskWebApp.Classes
@using ADefHelpDeskWebApp.Controllers
@using ADefHelpDeskWebApp.Controllers.InternalApi
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService dialogService
@inject IConfiguration _configuration
@inject RoleController _RoleController
@inject UserManagerController _UserManagerController
@inject UserManager<ApplicationUser> userManager

@if (@strError != "")
{
	<h4 style="color:red">@strError</h4>
}
<div class="row">
	<div class="col-md-12">
		<RadzenTabs Change="OnTabChange" RenderMode="TabRenderMode.Server">
			<Tabs>
				<RadzenTabsItem Text="Details">
					<table class="form-group" cellpadding="4" cellspacing="4" style="width: 100%;">
						<tbody>
							<tr>
								<td>
									<label for="User Name" class="control-label" style="font-weight: bold">User Name: </label>
								</td>
								<td>
									@if (@SelectedDTOUser.userId == -1)
									{
										<RadzenTextBox @bind-Value="SelectedDTOUser.userName" style="width: 100%;" />
									}
									else
									{
										<b>@SelectedDTOUser.userName</b>
									}
								</td>
							</tr>
							<tr>
								<td>
									<label for="Password" class="control-label" style="font-weight: bold">Password: </label>
								</td>
								<td>
									<RadzenPassword Placeholder="Enter new password to change..." @bind-Value="SelectedDTOUser.password" style="width: 100%;" />
								</td>
							</tr>
							<tr>
								<td>
									<label for="Name" class="control-label" style="font-weight: bold">First Name: </label>
								</td>
								<td>
									<RadzenTextBox @bind-Value="SelectedDTOUser.firstName " style="width: 100%;" />
								</td>
							</tr>
							<tr>
								<td>
									<label for="Company" class="control-label" style="font-weight: bold">Last Name: </label>
								</td>
								<td>
									<RadzenTextBox @bind-Value="SelectedDTOUser.lastName" style="width: 100%;" />
								</td>
							</tr>
							<tr>
								<td>
									<label for="Email" class="control-label" style="font-weight: bold">Email: </label>
								</td>
								<td>
									<RadzenTextBox @bind-Value="SelectedDTOUser.email" style="width: 100%;" />
								</td>
							</tr>
							<tr>
								<td>
									<label for="Active" class="control-label" style="font-weight: bold">Is SuperUser: </label>
								</td>
								<td>
									<RadzenCheckBox TValue="bool" @bind-Value="SelectedDTOUser.isSuperUser" />
								</td>
							</tr>
						</tbody>
					</table>
				</RadzenTabsItem>
				<RadzenTabsItem Text="Roles">
					<div style="display: flex; align-items: center">
						<RadzenDropDown Data=@colRoles @bind-Value=@newRole
										TValue="RoleDTO" Count="@count"
										TextProperty="roleName"
										Style="width:300px" />&nbsp;
						<RadzenButton Click=@(args => AddRole())
									  Text="Add Role" ButtonStyle="ButtonStyle.Success" />
					</div><br />
					<RadzenDataGrid Data="SelectedDTOUser.userRoles" @ref="grid" TItem="RoleDTO"
									AllowVirtualization="false" Style="height:200px"
									AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
									LogicalFilterOperator="LogicalFilterOperator.Or"
									AllowSorting="true">
						<Columns>
							<RadzenDataGridColumn Width="80px" TItem="RoleDTO" Property="iD" Title="Edit" Sortable=false Filterable=false>
								<Template Context="data">
									<RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Click=@(() => DeleteRole(data)) />
								</Template>
							</RadzenDataGridColumn>
							<RadzenDataGridColumn TItem="RoleDTO" Property="roleName" Title="roleName" />
						</Columns>
					</RadzenDataGrid>
				</RadzenTabsItem>
				<RadzenTabsItem Text="External Logins">
					<!-- Display list of currentLogins -->
					@if (currentLogins != null)
					{
						<table class="form-group" cellpadding="4" cellspacing="4">
							<tbody>
								@foreach (var login in currentLogins)
								{
									<tr>
										<td>
											<label class="control-label">@login.LoginProvider</label>
										</td>
										<td>
											<button type="button" class="btn btn-danger" @onclick="() => ConfirmDelete(login)">Delete</button>
										</td>
									</tr>
								}
							</tbody>
						</table>
					}
				</RadzenTabsItem>
			</Tabs>
		</RadzenTabs>
	</div>
</div>
<br />
@if (ShowUpdateDelete)
{
	<div class="row">
		<div class="col-md-12">
			<RadzenButton Click="UpdateUser"
			Text="Save" ButtonStyle="ButtonStyle.Success"
			Style="margin-bottom: 10px; width: 150px" />
			&nbsp;
			@if (SelectedDTOUser.userId > 0)
			{
				<RadzenButton Click="DeleteUserDialog"
				ButtonStyle="ButtonStyle.Danger"
				Text="Delete"
				Style="margin-bottom: 10px; width: 150px" />
			}
		</div>
	</div>
}
@code {
	[CascadingParameter]
	private Task<AuthenticationState> authenticationStateTask { get; set; }

	[Parameter] public DTOUser SelectedDTOUser { get; set; }

	ApplicationUser SelectedApplicationUser = new ApplicationUser();

	private IList<UserLoginInfo> currentLogins;

	System.Security.Claims.ClaimsPrincipal CurrentUser;
	RadzenDataGrid<RoleDTO> grid;
	IEnumerable<RoleDTO> colRoles = new List<RoleDTO>();
	int count;
	RoleDTO newRole = new RoleDTO();
	string strError = "";
	bool ShowUpdateDelete = true;

	protected override async Task OnInitializedAsync()
	{
		// Get the current user
		CurrentUser = (await authenticationStateTask).User;

		count = SelectedDTOUser.userRoles.Count;

		_UserManagerController = (UserManagerController)ScopedServices.GetService(typeof(UserManagerController));
		_RoleController = (RoleController)ScopedServices.GetService(typeof(RoleController));

		// Get all Roles
		colRoles = _RoleController.GetRoles();

		// Update Role Dropdown
		List<RoleDTO> NewRoleList = new List<RoleDTO>();

		foreach (var role in colRoles)
		{
			if(!SelectedDTOUser.userRoles.Any(x => x.iD == role.iD))
			{
				NewRoleList.Add(role);
			}
		}

		colRoles = NewRoleList.OrderBy(x => x.roleName);

		if (!string.IsNullOrEmpty(SelectedDTOUser.userName))
		{
			// Convert SelectedDTOUser to ApplicationUser
			SelectedApplicationUser = await userManager.FindByNameAsync(SelectedDTOUser.userName);
		
			currentLogins = await userManager.GetLoginsAsync(SelectedApplicationUser);
		}
	}

	private void OnTabChange(int index)
	{
		// Handle tab change here
		Console.WriteLine($"Tab changed to index: {index}");

		// Perform any other logic you need
		switch (index)
		{
			case 0:
				ShowUpdateDelete = true;
				break;
			case 1:
				ShowUpdateDelete = true;
				break;
			case 2:
				ShowUpdateDelete = false;
				break;
		}
	}

	private async Task UpdateUser()
	{
		try
		{
			strError = "";
			DTOStatus Result;

			if (SelectedDTOUser.userId == -1)
			{
				Result = await _UserManagerController.CreateUser(SelectedDTOUser, CurrentUser.Identity.Name, NavigationManager.BaseUri);
			}
			else
			{
				Result = _UserManagerController.Put(SelectedDTOUser.userId, SelectedDTOUser, CurrentUser.Identity.Name);
			}

			if (Result.Success)
			{
				dialogService.Close(SelectedDTOUser);
			}
			else
			{
				strError = Result.StatusMessage;
			}
		}
		catch (Exception ex)
		{
			strError = ex.GetBaseException().Message;
		}
	}

	async Task DeleteUserDialog() => await dialogService
		.OpenAsync("Delete User", ds =>
	@<RadzenCard Style="padding: 20px;">
		<p Style="margin-bottom: 10px;">Confirm?</p>
		<div class="row">
			<div class="col-md-12">
				<RadzenButton Text="Yes" Click="DeleteUser"
						  Style="margin-bottom: 10px; width: 150px" />
				<RadzenButton Text="No" Click="()=> ds.Close(false)"
						  ButtonStyle="ButtonStyle.Secondary"
						  Style="margin-bottom: 10px; width: 150px" />
			</div>
		</div>
	</RadzenCard>
	);

	private async Task DeleteUser()
	{
		try
		{
			strError = "";
			DTOStatus Result;

			Result = await _UserManagerController.Delete(SelectedDTOUser.userId, CurrentUser.Identity.Name);

			if (Result.Success)
			{
				SelectedDTOUser.userId = -1;
				dialogService.Close(false);
				dialogService.Close(SelectedDTOUser);
			}
			else
			{
				strError = Result.StatusMessage;
			}
		}
		catch (Exception ex)
		{
			strError = ex.GetBaseException().Message;
		}
	}

	async Task AddRole()
	{
		if (newRole.iD > 0)
		{
			// Add Role - if not already exist
			if (SelectedDTOUser.userRoles.Where(x => x.iD == newRole.iD).Count() == 0)
			{
				SelectedDTOUser.userRoles.Add(newRole);
				count = SelectedDTOUser.userRoles.Count;

				// Update Role Dropdown
				List<RoleDTO> NewRoleList = colRoles.Except(SelectedDTOUser.userRoles).ToList();
				colRoles = NewRoleList;

				newRole = new RoleDTO();
			}

			await grid.Reload();
		}
	}

	async Task DeleteRole(RoleDTO Role)
	{
		// Remove Role - if exist
		if (SelectedDTOUser.userRoles.Where(x => x.iD == Role.iD).Count() > 0)
		{
			SelectedDTOUser.userRoles.Remove(Role);
			count = SelectedDTOUser.userRoles.Count;

			// Update Role Dropdown
			List<RoleDTO> NewRoleList = colRoles.Append(Role).OrderBy(x => x.roleName).ToList(); 
			colRoles = NewRoleList;

			newRole = new RoleDTO();
		}

		await grid.Reload();
	}

	private async void DeleteLogin(UserLoginInfo objUserLoginInfo)
	{
		var result = await userManager.RemoveLoginAsync(SelectedApplicationUser, objUserLoginInfo.LoginProvider, objUserLoginInfo.ProviderKey);

		if (result.Succeeded)
		{
			// Refresh the current logins
			currentLogins = currentLogins.Where(ul => ul.LoginProvider != objUserLoginInfo.LoginProvider).ToList();
			StateHasChanged();
			return;
		}
		else
		{
			strError = result.Errors.FirstOrDefault().Description;
			StateHasChanged();
			return;
		}
	}

	[JSInvokable]
	public async Task ConfirmDelete(UserLoginInfo login)
	{
		var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { $"Are you sure you want to delete the login for {login.ProviderDisplayName}?" });
		if (confirmed)
		{
			DeleteLogin(login);
		}
	}
}

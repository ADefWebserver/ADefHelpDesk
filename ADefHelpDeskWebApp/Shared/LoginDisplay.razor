@inherits OwningComponentBase
@using ADefHelpDeskWebApp.Classes
@using AdefHelpDeskBase.Models
@using ADefHelpDeskWebApp.Controllers
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@inject IConfiguration _configuration
@inject ApplicationSettingsController _ApplicationSettingsController
@inject NavigationManager NavigationManager
<AuthorizeView>
    <Authorized>
        <a href="profilecontrol">Hello, @context.User.Identity.Name!</a>&nbsp;&nbsp;&nbsp;
        <form method="post" action="Identity/Account/LogOut">
            <input type="hidden" name="ReturnUrl" value="Index" />
            <button type="submit" class="btn btn-secondary">Log out</button>
        </form>
    </Authorized>
    <NotAuthorized>
        <button hidden="@(!AllowRegistration)" class="btn btn-primary" @onclick="Register">Register</button>
        &nbsp;
        <a class="btn btn-success" href="Identity/Account/Login">Log in</a>
    </NotAuthorized>
</AuthorizeView>
@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    bool AllowRegistration = false;
    private string currentUrl;

    protected override void OnInitialized()
    {
        // Get database conection string
        string strDefaultConnection = _configuration["ConnectionStrings:DefaultConnection"];

        GeneralSettings objGeneralSettings = new GeneralSettings(strDefaultConnection);
        AllowRegistration = objGeneralSettings.AllowRegistration;

        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    private void Register()
    {
        NavigationManager.NavigateTo("registercontrol", forceLoad: true);
    }

    private void LogIn()
    {
        NavigationManager.NavigateTo("Authentication/logincontrol", forceLoad: true);
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
@using ADefHelpDeskWebApp.Classes
@using AdefHelpDeskBase.Models.DataContext
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.EntityFrameworkCore
@using Microsoft.JSInterop
@using Radzen.Blazor
@inject IConfiguration _configuration
@inject IJSRuntime JSRuntime
@inject ADefHelpDeskContext context
<div class="row justify-content-start align-items-center px-2 pt-2">
    <div class="col-6 d-flex align-items-center">
        <RadzenImage Path="images/logo.png" />
    </div>
    <div class="col-6 d-flex align-items-center justify-content-end">
        <div class="d-md-inline-flex align-items-center">
            <LoginDisplay />
        </div>
    </div>
</div>
<RadzenMenu>
    <RadzenMenuItem Text="Home" Path="index" Icon="home"></RadzenMenuItem>
    @if (IsAuthenticated)
    {
        <RadzenMenuItem Text="Existing Tickets" Path="tickets" Icon="confirmation_number"></RadzenMenuItem>
        @if (IsAdmin)
        {
           <RadzenMenuItem Text="Reports" Path="reports" Icon="analytics"></RadzenMenuItem>
        }
        @if (IsSuperAdmin)
        {
            <RadzenMenuItem Text="Administration" Icon="table_chart">
                <RadzenMenuItem Text="User Manager" Path="usermanager" Icon="groups"></RadzenMenuItem>
                <RadzenMenuItem Text="Roles" Path="userassignmentroles" Icon="admin_panel_settings"></RadzenMenuItem>
                <RadzenMenuItem Text="Tags" Path="tagsadmin" Icon="account_tree"></RadzenMenuItem>
                <RadzenMenuItem Text="Email" Path="emailadmin" Icon="email"></RadzenMenuItem>
                <RadzenMenuItem Text="Application Settings" Path="applicationsettings" Icon="settings"></RadzenMenuItem>
                <RadzenMenuItem Text="API Security" Path="apisecurity" Icon="lock"></RadzenMenuItem>
                <RadzenMenuItem Text="System Files" Path="filemanager" Icon="folder"></RadzenMenuItem>
                <RadzenMenuItem Text="System Logs" Path="systemlogs" Icon="storage"></RadzenMenuItem>
            </RadzenMenuItem>
        }
    }
</RadzenMenu>
@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    bool IsAuthenticated = false;
    bool IsSuperAdmin = false;
    bool IsAdmin = false;
    System.Security.Claims.ClaimsPrincipal CurrentUser;
    string strDefaultConnection = "";

    protected override async Task OnInitializedAsync()
    {
        // Get database conection string
        strDefaultConnection = _configuration["ConnectionStrings:DefaultConnection"];

        if (authenticationStateTask != null)
        {
            // Get the current user
            CurrentUser = (await authenticationStateTask).User;

            IsAuthenticated = CurrentUser.Identity.IsAuthenticated;

            try
            {
                IsSuperAdmin = await IsSuperUserAsync();

                if (CurrentUser.Identity.IsAuthenticated)
                {
                    IsAdmin = UtilitySecurity.IsAdministrator(CurrentUser.Identity.Name ?? "", strDefaultConnection);
                }
            }
            catch
            {
                IsSuperAdmin = false;
                IsAdmin = false;
            }
        }
        else
        {
            IsSuperAdmin = false;
            IsAdmin = false;
        }
    }

    public async Task<bool> IsSuperUserAsync()
    {
        bool result = false;

        var optionsBuilder = new DbContextOptionsBuilder<ADefHelpDeskContext>();
        optionsBuilder.UseSqlServer(strDefaultConnection);

        using (var context = new ADefHelpDeskContext(optionsBuilder.Options))
        {
            try
            {
                if (CurrentUser.Identity == null)
                {
                    return false;
                }
                
                if (CurrentUser.Identity.Name == null)
                {
                    return false;
                }
                
                // Get the user
                var objUser = await (from user in context.AdefHelpDeskUsers
                                     where user.Username.ToLower() == CurrentUser.Identity.Name.ToLower()
                                     where user.IsSuperUser == true
                                     select user).FirstOrDefaultAsync();

                if (objUser != null)
                {
                    result = true;
                }
                else
                {
                    result = false;
                }
            }
            catch
            {
                result = false;
            }
        }

        return result;
    }
}
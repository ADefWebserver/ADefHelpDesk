@using System.Security.Claims;
@using ADefHelpDeskWebApp.Data;
@using ADefHelpDeskWebApp.Data.Models;
@using Microsoft.AspNetCore.Hosting;
@using Microsoft.EntityFrameworkCore;
@using AdefHelpDeskBase.Models;
@using AdefHelpDeskBase.Models.DataContext;
@using ADefHelpDeskWebApp.Classes;
@inject IConfiguration _configuration
@inject IWebHostEnvironment _IWebHostEnvironment
@inject NavigationManager NavigationManager
@inherits OwningComponentBase

@if (@ErrorMessage != "")
{
    <h4>@ErrorMessage</h4>
}
else
{
    <h4>@ExecuteScriptsMode...</h4>
    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    // ExecuteScriptsChanged is an EventCallback that will
    // notify the parent component ExecuteScripts Is complete
    [Parameter] public EventCallback<bool> ExecuteScriptsChanged { get; set; }

    [Parameter] public string ExecuteScriptsMode { get; set; }

    int intCurrentDatabaseVersion = 0;
    string ErrorMessage = "";
    string VersionNumber = "";

    ClaimsPrincipal CurrentUser = new ClaimsPrincipal();

    protected override async Task OnInitializedAsync()
    {
        // Get current user
        CurrentUser = (await authenticationStateTask).User;

        // Get the version Number
        try
        {
            // Get database conection string
            string strDefaultConnection = _configuration["ConnectionStrings:DefaultConnection"];

            var GeneralSettings = new GeneralSettings(strDefaultConnection);
            VersionNumber = GeneralSettings.VersionNumber;
        }
        catch
        {
            VersionNumber = "00.00.00";
        }

        intCurrentDatabaseVersion = ConvertVersionToInteger(VersionNumber);
    }

    protected override async Task
        OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            StateHasChanged();
            Task.Delay(1000).Wait();

            // Get database conection string
            string strDefaultConnection = _configuration["ConnectionStrings:DefaultConnection"];

            // Get the scripts
            Dictionary<int, string> ColScripts = UpdateScripts();
            foreach (var sqlScript in ColScripts)
            {
                try
                {
                    // Only run the script if it is higher than the
                    // current database version
                    if (sqlScript.Key > intCurrentDatabaseVersion)
                    {
                        string strSQLScript = GetSQLScript(sqlScript.Value);

                        var optionsBuilder = new DbContextOptionsBuilder<ADefHelpDeskContext>();
                        optionsBuilder.UseSqlServer(strDefaultConnection);

                        using (var context = new ADefHelpDeskContext(optionsBuilder.Options))
                        {
                            try
                            {
                                await context.Database.ExecuteSqlRawAsync(strSQLScript);
                            }
                            catch (Exception ex)
                            {
                                ErrorMessage = ex.Message;
                                StateHasChanged();
                                return;
                            }

                            Task.Delay(1000).Wait();
                        }
                    }
                }
                catch (Exception ex)
                {
                    ErrorMessage = ex.Message;
                    StateHasChanged();
                    return;
                }
            }

            // Notify parent component
            await ExecuteScriptsChanged.InvokeAsync(true);
        }
    }

    #region private static int ConvertVersionToInteger(string strParamVersion)
    private static int ConvertVersionToInteger(string strParamVersion)
    {
        int intVersionNumber = 0;

        if (strParamVersion != "")
        {
            // Strip out possible .sql in string
            string strVersion = strParamVersion.Replace(".sql", "").Replace(".Sql", "");

            // Split into parts seperated by periods
            char[] splitchar = { '.' };
            var strSegments = strVersion.Split(splitchar);

            // Process the segments
            int i = 0;
            List<int> colMultiplyers = new List<int> { 10000, 100, 1 };
            foreach (var strSegment in strSegments)
            {
                int intSegmentNumber = Convert.ToInt32(strSegment);
                intVersionNumber = intVersionNumber + (intSegmentNumber * colMultiplyers[i]);
                i++;
            }
        }

        return intVersionNumber;
    }
    #endregion

    #region private String GetSQLScript(string SQLScript)
    private String GetSQLScript(string SQLScript)
    {
        string strSQLScript = "";
        string strFilePath = _IWebHostEnvironment.ContentRootPath + $@"\SQLScripts\{SQLScript}";

        strSQLScript = System.IO.File.ReadAllText(@strFilePath);

        return strSQLScript;
    }
    #endregion

    private static Dictionary<int, string> UpdateScripts()
    {
        Dictionary<int, string> ColScripts = new Dictionary<int, string>();

        ColScripts.Add(ConvertVersionToInteger("01.00.00.sql"), "01.00.00.sql");
        ColScripts.Add(ConvertVersionToInteger("02.10.00.Sql"), "02.10.00.Sql");
        ColScripts.Add(ConvertVersionToInteger("03.10.00.Sql"), "03.10.00.Sql");
        ColScripts.Add(ConvertVersionToInteger("03.20.00.Sql"), "03.20.00.Sql");
        ColScripts.Add(ConvertVersionToInteger("03.30.00.Sql"), "03.30.00.Sql");
        ColScripts.Add(ConvertVersionToInteger("04.00.00.Sql"), "04.00.00.Sql");
        ColScripts.Add(ConvertVersionToInteger("04.10.00.Sql"), "04.10.00.Sql");
        ColScripts.Add(ConvertVersionToInteger("04.20.00.Sql"), "04.20.00.Sql");
        ColScripts.Add(ConvertVersionToInteger("04.30.00.Sql"), "04.30.00.Sql");

        return ColScripts;
    }
}

@page "/applicationsettings"
@inherits OwningComponentBase
@using ADefHelpDeskWebApp.Classes
@using AdefHelpDeskBase.Models
@using ADefHelpDeskWebApp.Controllers
@inject IConfiguration _configuration
@inject ApplicationSettingsController _ApplicationSettingsController
@inject NavigationManager NavigationManager
<h4>Application Settings</h4>
<AuthorizeView>
    <Authorized>
        @if (@IsSuperAdmin)
        {
            <table class="form-group" cellpadding="4" cellspacing="4">
                <tbody>
                    <tr>
                        <td>
                            <label for="Application Name" class="control-label" style="font-weight: bold">Application Name: </label>
                        </td>
                        <td>
                            <RadzenTextBox @bind-Value=@applicationName style="width: 100%;" />
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label for="File Storage Type" class="control-label" style="font-weight: bold">File Storage Type: </label>
                        </td>
                        <td>
                            <RadzenDropDown Data=@storageFileTypeDropdown @bind-Value=@selectedStoragefiletype
                                        TextProperty="ItemLabel"
                                        ValueProperty="ItemStringValue"
                                        Style="width:300px" />
                        </td>
                    </tr>
                    <tr hidden="@((String)selectedStoragefiletype == "AzureStorage")">
                        <td>
                            <label for="File Upload Path" class="control-label" style="font-weight: bold">File Upload Path: </label>
                        </td>
                        <td>
                            <RadzenTextBox @bind-Value=@fileUploadPath style="width: 100%;" />
                        </td>
                    </tr>
                    <tr hidden="@((String)selectedStoragefiletype == "FileSystem")">
                        <td>
                            <label for="Azure Storage Connection" class="control-label" style="font-weight: bold">Azure Storage Connection: </label>
                        </td>
                        <td>
                            <RadzenTextBox @bind-Value=@azurestorageconnection style="width: 100%;" />
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label for="File Upload Permission" class="control-label" style="font-weight: bold">File Upload Permission: </label>
                        </td>
                        <td>
                            <RadzenDropDown Data=@uploadPermissionDropdown @bind-Value=@selectedPermission
                                        TextProperty="ItemLabel"
                                        ValueProperty="ItemStringValue"
                                        Style="width:300px" />
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label for="Allow User Registration" class="control-label" style="font-weight: bold">Allow User Registration: </label>
                        </td>
                        <td>
                            <RadzenDropDown Data=@allowUserRegistrationDropdown @bind-Value=@selectedAllowUserRegistration
                                        TextProperty="ItemLabel"
                                        ValueProperty="ItemBoolValue"
                                        Style="width:300px" />
                        </td>
                    </tr>
                    <tr hidden="@(!(bool)selectedAllowUserRegistration)">
                        <td>
                            <label for="Verified Registration" class="control-label" style="font-weight: bold">Verified Registration: </label>
                        </td>
                        <td>
                            <RadzenDropDown Data=@verifiedRegistrationDropdown @bind-Value=@selectedVerifiedRegistration
                                        TextProperty="ItemLabel"
                                        ValueProperty="ItemBoolValue"
                                        Style="width:300px" />
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label for="Application GUID" class="control-label" style="font-weight: bold">Application GUID: </label>
                        </td>
                        <td>
                            <label class="control-label">@applicationGUID</label>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <button type="button" label="Save"
                                class="btn btn-success"
                                @onclick="Save">
                                Save
                            </button>
                        </td>
                    </tr>
                </tbody>
            </table>
            @if (@showWaitGraphic)
            {
                <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
            }
            @if (@Message != "")
            {
                <h4 style="color:red">@Message</h4>
            }
        }
        else
        {
            <p>Must be a Super Administrator</p>
        }
    </Authorized>
    <NotAuthorized>
        <p>You're not signed in.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    System.Security.Claims.ClaimsPrincipal CurrentUser;

    public bool IsSuperAdmin = false;
    public bool showWaitGraphic = false;
    public string Message = "";
    public string applicationName = "";
    public string fileUploadPath = "";
    public object selectedStoragefiletype;
    public string azurestorageconnection = "";
    public object selectedPermission = "";
    public string applicationGUID = "";
    public List<SelectItem> storageFileTypeDropdown = new List<SelectItem>();
    public List<SelectItem> uploadPermissionDropdown = new List<SelectItem>();
    public object selectedAllowUserRegistration;
    public object selectedVerifiedRegistration;
    public List<SelectItem> allowUserRegistrationDropdown = new List<SelectItem>();
    public List<SelectItem> verifiedRegistrationDropdown = new List<SelectItem>();

    protected override async Task OnInitializedAsync()
    {
        // Get database conection string
        string strDefaultConnection = _configuration["ConnectionStrings:DefaultConnection"];

        // Get the current user
        CurrentUser = (await authenticationStateTask).User;
        DTOUser objDTOUser = UtilitySecurity.UserFromUserName(CurrentUser.Identity.Name, strDefaultConnection);
        IsSuperAdmin = objDTOUser.isSuperUser;

        _ApplicationSettingsController = (ApplicationSettingsController)ScopedServices.GetService(typeof(ApplicationSettingsController));

        populateDropdowns();
    }

    private void populateDropdowns()
    {
        // ** Upload Permission
        uploadPermissionDropdown.Add(new SelectItem() { ItemLabel = "All", ItemStringValue = "All" });
        uploadPermissionDropdown.Add(new SelectItem() { ItemLabel = "Administrator", ItemStringValue = "Administrator" });
        uploadPermissionDropdown.Add(new SelectItem() { ItemLabel = "Administrator/Registered Users", ItemStringValue = "Administrator/Registered Users" });

        // ** Storage File Type
        storageFileTypeDropdown.Add(new SelectItem() { ItemLabel = "File System", ItemStringValue = "FileSystem" });
        storageFileTypeDropdown.Add(new SelectItem() { ItemLabel = "Azure Storage", ItemStringValue = "AzureStorage" });

        // ** Allow User Registration
        allowUserRegistrationDropdown.Add(new SelectItem() { ItemLabel = "True", ItemBoolValue = true });
        allowUserRegistrationDropdown.Add(new SelectItem() { ItemLabel = "False", ItemBoolValue = false });

        // ** Verified Registration
        verifiedRegistrationDropdown.Add(new SelectItem() { ItemLabel = "True", ItemBoolValue = true });
        verifiedRegistrationDropdown.Add(new SelectItem() { ItemLabel = "False", ItemBoolValue = false });

        // Get current settings
        GetCurrentSettings();
    }

    private void GetCurrentSettings()
    {
        var DTOSettings = _ApplicationSettingsController.GetSettings(CurrentUser.Identity.Name, NavigationManager.BaseUri);

        applicationName = DTOSettings.applicationName;
        fileUploadPath = DTOSettings.fileUploadPath;
        azurestorageconnection = DTOSettings.azurestorageconnection;
        applicationGUID = DTOSettings.applicationGUID;

        selectedStoragefiletype = DTOSettings.storagefiletype;
        selectedPermission = DTOSettings.uploadPermission;
        selectedAllowUserRegistration = DTOSettings.allowRegistration;
        selectedVerifiedRegistration = DTOSettings.verifiedRegistration;

        StateHasChanged();
    }

    private void Save()
    {
        try
        {
            Message = "";
            showWaitGraphic = true;
            StateHasChanged();

            // Get the form values
            DTOApplicationSetting ApplicationSettings = new DTOApplicationSetting()
            {
                applicationName = applicationName,
                applicationGUID = applicationGUID,
                fileUploadPath = fileUploadPath,
                storagefiletype = (String)selectedStoragefiletype,
                azurestorageconnection = this.azurestorageconnection,
                uploadPermission = (String)selectedPermission,
                allowRegistration = (bool)selectedAllowUserRegistration,
                verifiedRegistration = (bool)selectedVerifiedRegistration,
                status = "",
                valid = true,
                termsOfUse = "",
                privacyStatement = "",
                swaggerWebAddress = ""
            };

            // Call the service
            DTOApplicationSetting result = _ApplicationSettingsController.SetSettings(ApplicationSettings, CurrentUser.Identity.Name);

            // Was update successful?
            if (!result.valid)
            {
                Message = result.status;
            }
            else
            {
                Message = "Saved";
            }

            showWaitGraphic = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            showWaitGraphic = false;
            Message = ex.Message;
            StateHasChanged();
            return;
        }
    }
}

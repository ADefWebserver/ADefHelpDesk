@page "/Account/ExternalLogin"
@inherits OwningComponentBase
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using System.Text
@using System.Text.Encodings.Web
@using ADefHelpDeskWebApp.Components.Account
@using ADefHelpDeskWebApp.Controllers
@using AdefHelpDeskBase.Controllers
@using AdefHelpDeskBase.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using ADefHelpDeskWebApp.Data
@inject ApplicationSettingsController _ApplicationSettingsController
@inject RegisterController _RegisterController
@inject IConfiguration _configuration
@inject IWebHostEnvironment _HostEnvironment
@inject UserManager<ApplicationUser> _UserManager
@inject SignInManager<ApplicationUser> _SignInManager
@inject RoleManager<IdentityRole> _RoleManager
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ExternalLogin> Logger

<PageTitle>External Login</PageTitle>
@if (message != null)
{
    <div class="alert alert-danger" role="alert">
        @message
    </div>
}

@if (!ShowSuccess)
{
    <h2>Associate your @ProviderDisplayName account to @strEmail</h2>
    <hr />

    <div class="alert alert-info">
        You've successfully authenticated with <strong>@ProviderDisplayName</strong>.
        Please enter the password for the existing <strong>@strEmail</strong> account
        and click the <strong>Associate</strong> button to finish logging in.
    </div>

    <div class="row">
        <div class="col-md-4">
            <EditForm Model="Input" OnValidSubmit="OnValidSubmitAsync" FormName="confirmation" method="post">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Password"
                               class="form-control"
                               autocomplete="password" type="password"
                               placeholder="Please enter the password for the account." />
                </div>
                <button type="submit" class="w-100 btn btn-lg btn-primary">Associate</button>
            </EditForm>
        </div>
    </div>

    <br />
    @if (Showlogout)
    {
        <div class="row">
            <div class="col-md-4">
                <div style="background-color:cornsilk">
                    @if (externalLoginInfo.LoginProvider == "Google")
                    {
                        <a href="https://accounts.google.com/Logout" class="btn-block btn btn-google" title="Log out of your Google account" name="provider">
                            Or <u>[Log out of your <i class="fab fa-google fa-align-left social-icon"></i>oogle account]</u>
                        </a>
                    }
                    else if (externalLoginInfo.LoginProvider == "Microsoft")
                    {
                        <a href="https://login.microsoftonline.com/logout.srf" class="btn-block btn btn-microsoft" title="Log out of your Microsoft account" name="provider">
                            Or <u>[Log out of <i class="fab fa-microsoft fa-align-left social-icon"></i> Microsoft account]</u>
                        </a>
                    }
                </div>
            </div>
        </div>
    }
}
else
{
    <div class="alert alert-info">
        You've successfully associated <strong>@ProviderDisplayName</strong> with the existing account.
    </div>
    <br />
    <form class="form-horizontal" action="/Index" method="get">
        <div>
            <AntiforgeryToken />
            <div class="col-md-3">
                <button type="submit" name="provider" class="w-100 btn btn-lg btn-primary"
                        value="continue" title="Log in to your account">
                    Continue
                </button>
            </div>
        </div>
    </form>
}
@code {
    public const string LoginCallbackAction = "LoginCallback";

    private string message;
    private ExternalLoginInfo externalLoginInfo = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string RemoteError { get; set; }

    [SupplyParameterFromQuery]
    private string ReturnUrl { get; set; }

    [SupplyParameterFromQuery]
    private string Action { get; set; }

    private string ProviderDisplayName => externalLoginInfo.ProviderDisplayName;

    private bool AllowRegistration = false;
    private bool Showlogout = false;
    private bool ShowSuccess = false;

    string strEmail = "";
    string strFirstName = "";
    string strLastName = "";

    // RegisterStatus to return
    RegisterStatus objRegisterStatus = new RegisterStatus();

    protected override async Task OnInitializedAsync()
    {
        _RegisterController = (RegisterController)ScopedServices.GetService(typeof(RegisterController));
        _ApplicationSettingsController = (ApplicationSettingsController)ScopedServices.GetService(typeof(ApplicationSettingsController));

        var DTOSettings = _ApplicationSettingsController.GetSettings("", NavigationManager.BaseUri);
        AllowRegistration = DTOSettings.allowRegistration;

        if (RemoteError is not null)
        {
            RedirectManager.RedirectToWithStatus("Account/Login", $"Error from external provider: {RemoteError}", HttpContext);
        }

        var info = await SignInManager.GetExternalLoginInfoAsync();

        if (info is null)
        {
            RedirectManager.RedirectToWithStatus("Account/Login", "Error loading external login information.", HttpContext);
        }

        externalLoginInfo = info;

        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            if (Action == LoginCallbackAction)
            {
                await OnLoginCallbackAsync();
                return;
            }

            // We should only reach this page via the login callback, so redirect back to
            // the login page if we get here some other way.
            RedirectManager.RedirectTo("Account/Login");
        }
    }

    private async Task OnLoginCallbackAsync()
    {
        // Sign in the user with this external login provider if the user already has a login.
        var result = await SignInManager.ExternalLoginSignInAsync(
            externalLoginInfo.LoginProvider,
            externalLoginInfo.ProviderKey,
            isPersistent: false,
            bypassTwoFactor: true);

        if (result.Succeeded)
        {
            Logger.LogInformation(
                "{Name} logged in with {LoginProvider} provider.",
                externalLoginInfo.Principal.Identity?.Name,
                externalLoginInfo.LoginProvider);

            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            RedirectManager.RedirectTo("Account/Lockout");
        }

        if (AllowRegistration)
        {
            await CreateAccountAsync();
        }
        else
        {
            RedirectManager.RedirectTo("Account/Login");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.Password != null)
        {
            try
            {
                // Get email of the ExternalLoginUser
                string ExternalLoginUserEmail = "";
                if (externalLoginInfo.Principal.HasClaim(c => c.Type == ClaimTypes.Email))
                {
                    ExternalLoginUserEmail =
                        externalLoginInfo.Principal.FindFirstValue(ClaimTypes.Email);
                }

                // Check password against user in database
                var user = await UserManager.FindByEmailAsync(ExternalLoginUserEmail);

                if (user != null)
                {
                    var CheckPasswordResult =
                        await UserManager.CheckPasswordAsync(user, Input.Password);

                    if (CheckPasswordResult)
                    {
                        // user found and password is correct
                        // add external login to user and sign in
                        var AddLoginResult =
                            await UserManager.AddLoginAsync(user, externalLoginInfo);

                        if (AddLoginResult.Succeeded)
                        {
                            await SignInManager.SignInAsync(user, isPersistent: false, externalLoginInfo.LoginProvider);
                            ShowSuccess = true;
                            HttpContext.RedirectTo("/Index");
                        }
                        else
                        {
                            foreach (var error in AddLoginResult.Errors)
                            {
                                message = error.Description;
                            }
                        }
                    }
                    else // password is incorrect
                    {
                        message = "Password is incorrect";
                    }
                }
            }
            catch (Exception ex)
            {
                message = ex.Message;
            }
        }
    }

    private async Task CreateAccountAsync()
    {
        // If the user does not have an account create an account.

        if (externalLoginInfo.Principal.HasClaim(c => c.Type == ClaimTypes.Email))
        {
            strEmail = externalLoginInfo.Principal.FindFirstValue(ClaimTypes.Email) ?? "";
        }

        if (externalLoginInfo.Principal.HasClaim(c => c.Type == ClaimTypes.GivenName))
        {
            strFirstName = externalLoginInfo.Principal.FindFirstValue(ClaimTypes.GivenName) ?? "";
        }

        if (externalLoginInfo.Principal.HasClaim(c => c.Type == ClaimTypes.Surname))
        {
            strLastName = externalLoginInfo.Principal.FindFirstValue(ClaimTypes.Surname) ?? "";
        }

        // Create the User
        RegisterDTO objRegister = new RegisterDTO();
        objRegister.email = strEmail;
        objRegister.userName = strEmail;
        objRegister.firstName = strFirstName;
        objRegister.lastName = strLastName;
        objRegister.password = "";

        string strDefaultConnection = _configuration["ConnectionStrings:DefaultConnection"];

        objRegisterStatus = await _RegisterController.RegisterUser(
            objRegister, strDefaultConnection, _HostEnvironment, _UserManager,
            _SignInManager, true, NavigationManager.BaseUri);

        if (!objRegisterStatus.isSuccessful)
        {
            Showlogout = true;
            return;
        }

        var user = await UserManager.FindByNameAsync(strEmail);

        if (user != null)
        {
            var result = await UserManager.AddLoginAsync(user, externalLoginInfo);

            if (result.Succeeded)
            {
                Logger.LogInformation("User created an account using {Name} provider.", externalLoginInfo.LoginProvider);

                await SignInManager.SignInAsync(user, isPersistent: false, externalLoginInfo.LoginProvider);
                RedirectManager.RedirectTo(ReturnUrl);
            }
        }

        message = $"Error: User could not be created";
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        public string Password { get; set; } = "";
    }

    #region CreateVerificationKey
    private static string CreateVerificationKey(int KeyLength)
    {
        const string valid = "12389ABC*DEFGHIJKL@MN4567OPQRSTUVWXYZ#%";
        StringBuilder res = new StringBuilder();
        Random rnd = new Random();
        while (0 < KeyLength--)
        {
            res.Append(valid[rnd.Next(valid.Length)]);
        }
        return res.ToString() + "_u9#";
    }
    #endregion
}
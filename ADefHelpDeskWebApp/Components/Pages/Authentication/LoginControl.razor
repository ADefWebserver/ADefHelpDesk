@page "/Authentication/logincontrol"
@using ADefHelpDeskWebApp.Components.Account
@using Components.Layout
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Hosting
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Http
@using ADefHelpDeskWebApp.Classes
@using AdefHelpDeskBase.Models
@using AdefHelpDeskBase.Models.DataContext
@using System.ComponentModel.DataAnnotations
@inject UserManager<ApplicationUser> _userManager
@inject SignInManager<ApplicationUser> _signInManager
@inject IWebHostEnvironment _hostEnvironment
@inject IConfiguration _config
@inject IHttpContextAccessor _httpContextAccessor
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
<style>
    .center {
        display: flex;
        justify-content: center;
        align-items: center;
    }
</style>
<div class="row">
    <div class="col-md-4">
        <section>
            <p>@errorMessage</p>
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login" Enhance>
                <DataAnnotationsValidator />
                <h2>Use a local account to log in.</h2>
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="email" class="form-label">Username or Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="checkbox mb-3">
                    &nbsp;&nbsp;&nbsp;&nbsp;<InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                    <label for="checkbox" class="form-label">Remember me</label>
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                </div>
            </EditForm>
        </section>
    </div>
    @if (externalLogins.Length > 0)
    {
        <div class="col-md-6 col-md-offset-2">
            <section>
                <h3>Login in with your social account</h3>
                <hr />
                <ExternalLoginPicker />
            </section>
        </div>
    }
</div>
@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string ReturnUrl { get; set; }

    string errorMessage = "";

    private AuthenticationScheme[] externalLogins = [];

    public IList<AuthenticationScheme> ExternalLogins { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpContext is not null)
        {
            if (HttpMethods.IsGet(HttpContext.Request.Method))
            {
                // Clear the existing external cookie to ensure a clean login process
                await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
            }
        }

        // Suppress any external logins that are not configured

        externalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToArray();

        GeneralSettings objGeneralSettings = new GeneralSettings(GetConnectionString());

        if (objGeneralSettings.GoogleClientID == "" || objGeneralSettings.GoogleClientSecret == "")
        {
            externalLogins = externalLogins.Where(x => x.Name != "Google").ToArray();
        }

        if (objGeneralSettings.MicrosoftClientID == "" || objGeneralSettings.MicrosoftClientSecret == "")
        {
            externalLogins = externalLogins.Where(x => x.Name != "Microsoft").ToArray();
        }
    }

    private async Task LoginUser()
    {
        try
        {
            DTOAuthentication objDTOAuthentication = new DTOAuthentication
                {
                    userName = Input.Email,
                    password = Input.Password,
                    rememberMe = Input.RememberMe
                };

            var objLoginStatus = await GetLoginStatus(objDTOAuthentication);

            ReturnUrl = "/";

            if (objLoginStatus.isLoggedIn)
            {
                var objUser = await _signInManager.UserManager.FindByNameAsync(Input.Email);

                if (objUser != null)
                {
                    await _signInManager.SignInAsync(objUser, false);

                    try
                    {
                        Log.InsertSystemLog(GetConnectionString(), "Login", objUser.UserName, $"{objUser.UserName} logged in ");
                    }
                    catch
                    {
                        // Do nothing
                    }

                    HttpContext.RedirectTo("/Index");
                }
            }
            else
            {
                errorMessage = "Error: Invalid login attempt.";
            }
        }
        catch (Exception ex)
        {
            // Log the exception (using a logging framework or a simple log statement)
            errorMessage = $"An error occurred during login: {ex.Message}";
        }
    }

    public async Task<LoginStatus> GetLoginStatus(DTOAuthentication Authentication)
    {
        // LoginStatus to return
        var objLoginStatus = new LoginStatus { isLoggedIn = false };

        // Get values passed
        var paramUserName = Authentication.userName;
        var paramPassword = Authentication.password;
        var paramRememberMe = Authentication.rememberMe;

        if (paramUserName != null && paramPassword != null)
        {
            var optionsBuilder = new DbContextOptionsBuilder<ADefHelpDeskContext>();
            optionsBuilder.UseSqlServer(GetConnectionString());

            try
            {
                // Only check the legacy User password if user is not in the main table
                if (_userManager.Users.FirstOrDefault(x => x.UserName == paramUserName) == null)
                {
                    using (var context = new ADefHelpDeskContext(optionsBuilder.Options))
                    {
                        // First check the legacy User table
                        var objAdefHelpDeskUser = context.AdefHelpDeskUsers
                            .FirstOrDefault(u => u.Username == paramUserName && u.Password != "");

                        // User is in the Legacy table and the password is not null
                        // Check their password to see if this account can be migrated
                        if (objAdefHelpDeskUser != null &&
                            objAdefHelpDeskUser.Password == ComputeHash.GetSwcMD5(paramUserName.Trim().ToLower() + paramPassword.Trim()))
                        {
                            // Return that this account can be migrated
                            objLoginStatus.status = "Migrate";
                            return objLoginStatus;
                        }
                    }
                }
            }
            catch
            {
                // There may have been an error because this is an upgrade from a version
                // of Adefhelpdesk before the AspNetUsers tables existed
                using (var context = new ADefHelpDeskContext(optionsBuilder.Options))
                {
                    // Check the legacy User table
                    var objAdefHelpDeskUser = context.AdefHelpDeskUsers
                        .FirstOrDefault(u => u.Username == paramUserName && u.Password != "");

                    // If user is in the Legacy table and the password is not null
                    // Check their password
                    if (objAdefHelpDeskUser != null &&
                        objAdefHelpDeskUser.Password != ComputeHash.GetSwcMD5(paramUserName.Trim().ToLower() + paramPassword.Trim()))
                    {
                        objLoginStatus.status = "Error: Account needs to be migrated, but account cannot be migrated because the password is incorrect";
                        return objLoginStatus;
                    }
                }
            }

            // Check to see if the user needs to Verify their account
            using (var context = new ADefHelpDeskContext(optionsBuilder.Options))
            {
                var objAdefHelpDeskUser = context.AdefHelpDeskUsers
                    .FirstOrDefault(u => u.Username == paramUserName);

                if (objAdefHelpDeskUser?.VerificationCode != null)
                {
                    objLoginStatus.status = "Verify";
                    return objLoginStatus;
                }
            }

            // This doesn't count login failures towards account lockout
            // To enable password failures to trigger account lockout, set lockoutOnFailure: true
            var result = await _signInManager.PasswordSignInAsync(paramUserName, paramPassword, paramRememberMe, lockoutOnFailure: false);

            if (result.Succeeded)
            {
                objLoginStatus.status = "Success";
                objLoginStatus.isLoggedIn = true;
                return objLoginStatus;
            }
            if (result.RequiresTwoFactor)
            {
                objLoginStatus.status = "RequiresVerification";
                return objLoginStatus;
            }
            if (result.IsLockedOut)
            {
                objLoginStatus.status = "IsLockedOut";
                return objLoginStatus;
            }
        }

        objLoginStatus.status = "Authentication Failure";
        return objLoginStatus;
    }

    private string GetConnectionString()
    {
        try
        {
            return _config.GetConnectionString("DefaultConnection");
        }
        catch
        {
            return "ERROR:UNSET-CONNECTION-STRING";
        }
    }

    private sealed class InputModel
    {
        [Required]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
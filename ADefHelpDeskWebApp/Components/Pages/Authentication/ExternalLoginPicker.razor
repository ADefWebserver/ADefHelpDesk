@using ADefHelpDeskWebApp.Classes
@using ADefHelpDeskWebApp.Controllers
@using AdefHelpDeskBase.Models
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using ADefHelpDeskWebApp.Data
@inject ApplicationSettingsController _ApplicationSettingsController
@inject SignInManager<ApplicationUser> SignInManager
@inject IConfiguration _configuration

@if (externalLogins.Length > 0)
{
    <style>
        .btn-google:hover {
            background: #b22222;
            color: #fff;
        }

        .btn-microsoft:hover {
            background: #00618E;
            color: #fff;
        }

        .btn-google {
            background: #d24228;
            color: #fff;
        }

        .btn-microsoft {
            background: #007bb6;
            color: #fff;
        }
    </style>
    <form class="form-horizontal" action="Account/PerformExternalLogin" method="post">
        <div>
            <AntiforgeryToken />
            <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
            <p>
                @foreach (var provider in externalLogins)
                {
                    if (provider.Name == "Google")
                    {
                        <div class="col-md-3">
                            <button type="submit" class="btn btn-block btn-google" value="@provider.Name"
                                    title="Log in using your @provider.DisplayName account" name="provider">
                                <i class="fab fa-google-plus fa-align-left social-icon" style=""></i> Google
                            </button>
                        </div>
                        <span>&nbsp;&nbsp;</span>
                    }
                    else if (provider.Name == "Microsoft")
                    {
                        <div class="col-md-3">
                            <button class="btn-block btn btn-microsoft" type="submit" value="@provider.Name"
                                    title="Log in using your @provider.DisplayName account" name="provider">
                                <i class="fab fa-microsoft fa-align-left social-icon"></i> Microsoft
                            </button>
                        </div>
                        <span>&nbsp;&nbsp;</span>
                    }
                    else
                    {
                        <div class="col-md-3">
                            <button class="btn-block btn btn-linkedin" type="submit" name="provider"
                                    value="@provider.Name" title="Log in using your @provider.DisplayName account">
                                <i class="fab fa-life-buoy fa-align-left social-icon"></i>
                                Sign in with @provider.Name
                            </button>
                        </div>
                    }
                }
            </p>
        </div>
    </form>
}
@code {
    [SupplyParameterFromQuery]
    private string ReturnUrl { get; set; }

    private AuthenticationScheme[] externalLogins = [];

    protected override async Task OnInitializedAsync()
    {
        externalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToArray();

        // Suppress any external logins that are not configured
        string strDefaultConnection = _configuration["ConnectionStrings:DefaultConnection"];

        GeneralSettings objGeneralSettings = new GeneralSettings(strDefaultConnection);

        if (objGeneralSettings.GoogleClientID == "" || objGeneralSettings.GoogleClientSecret == "")
        {
            externalLogins = externalLogins.Where(x => x.Name != "Google").ToArray();
        }

        if (objGeneralSettings.MicrosoftClientID == "" || objGeneralSettings.MicrosoftClientSecret == "")
        {
            externalLogins = externalLogins.Where(x => x.Name != "Microsoft").ToArray();
        }
    }
}
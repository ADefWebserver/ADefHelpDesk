@inherits OwningComponentBase
@using ADefHelpDeskWebApp.Classes
@using AdefHelpDeskBase.Models
@using ADefHelpDeskWebApp.Controllers
@inject IConfiguration _configuration
@inject ApplicationSettingsController _ApplicationSettingsController
@inject NavigationManager NavigationManager
<AuthorizeView>
    <Authorized>
        <a href="profilecontrol">Hello, @context.User.Identity.Name!</a>
        <form method="post" action="LogOut">
            <button type="submit" class="nav-link btn btn-link">Log out</button>
        </form>
    </Authorized>
    <NotAuthorized>
        <button hidden="@(!AllowRegistration)" class="btn btn-primary" @onclick="Register">Register</button>
        &nbsp;
        <button class="btn btn-secondary" @onclick="LogIn">Log In</button>
    </NotAuthorized>
</AuthorizeView>
@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    System.Security.Claims.ClaimsPrincipal CurrentUser;

    bool AllowRegistration = false;

    protected override async Task OnInitializedAsync()
    {
        // Get database conection string
        string strDefaultConnection = _configuration["ConnectionStrings:DefaultConnection"];

        // Get the current user
        CurrentUser = (await authenticationStateTask).User;
        DTOUser objDTOUser = UtilitySecurity.UserFromUserName(CurrentUser.Identity.Name, strDefaultConnection);

        _ApplicationSettingsController = (ApplicationSettingsController)ScopedServices.GetService(typeof(ApplicationSettingsController));

        var DTOSettings = _ApplicationSettingsController.GetSettings(CurrentUser.Identity.Name, NavigationManager.BaseUri);
        AllowRegistration = DTOSettings.allowRegistration;
    }

    private void Register()
    {
        NavigationManager.NavigateTo("/registercontrol");
    }

    private void LogIn()
    {
        NavigationManager.NavigateTo("/logincontrol");
    }
}
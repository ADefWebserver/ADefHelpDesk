@inherits OwningComponentBase
@using ADefHelpDeskApp.Models
@using ADefHelpDeskApp.Classes
@using AdefHelpDeskBase.Controllers
@using AdefHelpDeskBase.Models
@using AdefHelpDeskBase.Models.DataContext
@using ADefHelpDeskApp.Controllers
@using ADefHelpDeskApp.Controllers.InternalApi
@using Microsoft.AspNetCore.Hosting
@using Microsoft.AspNetCore.Http;
@using Microsoft.EntityFrameworkCore
@using Excubo.Blazor.TreeViews
@using System.Linq
@using System.Net.Http.Headers
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Forms
@using System.IO
@using System.Text
@inject IConfiguration _configuration
@inject IWebHostEnvironment _IWebHostEnvironment
@inject IJSRuntime JSRuntime
@inject ADefHelpDeskContext context
@inject RoleController _RoleController
@inject CategoryTreeController _CategoryTreeController
@inject ApplicationSettingsController _ApplicationSettingsController
@inject TaskController _TaskController
@inject SearchParametersController _SearchParametersController
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject IFileReaderService fileReaderService
@inject IJSRuntime CurrentJSRuntime
<div style="height: 400px;max-height: 90%">
    @if (@Message != "")
    {
        <h4 style="color:red">@Message</h4>
    }
    @if (@showWaitGraphic)
    {
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
    }
    <div class="col-xl-12 col-lg-12 py-2">
        <RadzenTabs RenderMode="TabRenderMode.Server">
            <Tabs>
                @if (!IsAdmin) // Non-Admin (Info) Tab
                {
                    <RadzenTabsItem Text="Info">
                        <table class="form-group" cellpadding="4" cellspacing="4">
                            <tbody>
                                <tr>
                                    <td>
                                        <b>Status:</b>
                                    </td>
                                    <td>
                                        @($"{SelectedTaskForm.Status}")
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <b>Priority:</b>
                                    </td>
                                    <td>
                                        @($"{SelectedTaskForm.Priority}")
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <b>Name:</b>
                                    </td>
                                    <td>
                                        @($"{SelectedTaskForm.RequesterName}")
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <b>Phone:</b>
                                    </td>
                                    <td>
                                        @($"{SelectedTaskForm.RequesterPhone}")
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <b>Description:</b>
                                    </td>
                                    <td>
                                        @($"{SelectedTaskForm.Description}")
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <b>Due Date:</b>
                                    </td>
                                    <td>
                                        @($"{((SelectedTaskForm.DueDate.HasValue) ? SelectedTaskForm.DueDate.Value.ToShortDateString() : "") }")
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <b>Est. Hours:</b>
                                    </td>
                                    <td>
                                        @($"{((SelectedTaskForm.EstimatedHours.HasValue) ? SelectedTaskForm.EstimatedHours.Value : "") }")
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <b>Est. Completion:</b>
                                    </td>
                                    <td>
                                        @($"{((SelectedTaskForm.EstimatedCompletion.HasValue) ? SelectedTaskForm.EstimatedCompletion.Value.ToShortDateString() + " " + SelectedTaskForm.EstimatedCompletion.Value.ToShortTimeString() : "") }")
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </RadzenTabsItem>
                }
                else // Admin (Info) Tab
                {
                    <RadzenTabsItem Text="Info">
                        <table class="form-group" cellpadding="4" cellspacing="4">
                            <tbody>
                                @if (IsAdmin)
                                {
                                    <tr>
                                        <td></td>
                                        <td>
                                            @if (SelectedTaskForm.RequesterUserId != -1)
                                            {
                                                <a href="javascript: void(0)" @onclick="ClearUser"><b>[Clear User]</b></a>
                                            }
                                            else
                                            {
                                                <a href="javascript: void(0)" @onclick="SetUser"><b>[Set User]</b></a>
                                            }
                                        </td>
                                    </tr>
                                }
                                <tr>
                                    <td>
                                        <b>Name:</b>
                                    </td>
                                    <td>
                                        @if (!ShowManualUser)
                                        {
                                            @($"{SelectedTaskForm.RequesterName}  ")
                                        }
                                        else
                                        {
                                            <RadzenTextBox @bind-Value=SelectedTaskForm.RequesterName style="width: 100%;" />
                                        }
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <b>Email:</b>
                                    </td>
                                    <td>
                                        @if (!ShowManualUser)
                                        {
                                            @($"{SelectedTaskForm.RequesterEmail}")
                                        }
                                        else
                                        {
                                            <RadzenTextBox @bind-Value=SelectedTaskForm.RequesterEmail style="width: 100%;" />
                                        }
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <b>Phone:</b>
                                    </td>
                                    <td>
                                        <RadzenTextBox @bind-Value=SelectedTaskForm.RequesterPhone style="width: 100%;" />
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <b>Description:</b>
                                    </td>
                                    <td>
                                        <RadzenTextBox @bind-Value=SelectedTaskForm.Description style="width: 100%;" />
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <b>Due Date:</b>
                                    </td>
                                    <td>
                                        <RadzenDatePicker @bind-Value=SelectedTaskForm.DueDate DateFormat="d" />
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <b>Priority:</b>
                                    </td>
                                    <td>
                                        <RadzenDropDown Data=priorityDropdown @bind-Value=SelectedTaskForm.Priority
                                                    TextProperty="ItemLabel"
                                                    ValueProperty="ItemStringValue"
                                                    Style="width:300px" />
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </RadzenTabsItem>
                }
                <RadzenTabsItem Text="Comments">
                    <table class="form-group" cellpadding="4" cellspacing="4">
                        <tbody>
                            <tr>
                                <td>
                                    <b>Label:</b>
                                </td>
                                <td>
                                    <p>Content</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </RadzenTabsItem>
                @if (IsAdmin == true)
                {
                    <RadzenTabsItem Text="Work">
                        <table class="form-group" cellpadding="4" cellspacing="4">
                            <tbody>
                                <tr>
                                    <td>
                                        <b>Label:</b>
                                    </td>
                                    <td>
                                        <p>Content</p>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </RadzenTabsItem>
                }
                <RadzenTabsItem Text="Tags">
                    <!-- Tree Node Control -->
                    <TreeView Items="colAllTags"
                              GetChildren="(treenode) => treenode.children">
                        <ItemTemplate Context="treenode">
                            &nbsp;
                            @if (@treenode.Item.data.selectable)
                            {
                                <RadzenCheckBox @bind-Value=@treenode.Item.data.CheckboxChecked
                                            TValue="bool"
                                            @onclick:stopPropagation="true" />
                            }
                            &nbsp;@treenode.Item.label
                        </ItemTemplate>
                    </TreeView>
                </RadzenTabsItem>
                @if (IsAdmin == true)
                {
                    <RadzenTabsItem Text="Logs">
                        <table class="form-group" cellpadding="4" cellspacing="4">
                            <tbody>
                                <tr>
                                    <td>
                                        <b>Label:</b>
                                    </td>
                                    <td>
                                        <p>Content</p>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </RadzenTabsItem>
                }
            </Tabs>
        </RadzenTabs>
    </div>
</div>
@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    public DTOTask SelectedTask { get; set; }

    private DTOTaskForm SelectedTaskForm = new DTOTaskForm();

    private bool IsAuthenticated = false;
    private bool IsAdmin = false;
    private bool ShowManualUser = true;
    private System.Security.Claims.ClaimsPrincipal CurrentUser;
    private DTOUser objCurrentUser = new DTOUser() { userId = -1 };
    private string strDefaultConnection;

    private bool showWaitGraphic = false;
    private string Message = "";

    IFormFile FormFile;
    ElementReference inputElement;
    MemoryStream FileMemoryStream;

    public string ApplicationName = "";
    public string ApplicationGUID = "";
    public string FileUploadPermission = "";

    private List<CategoryDTO> colAllTags = new List<CategoryDTO>();
    private List<SelectItem> priorityDropdown = new List<SelectItem>();
    private List<SelectItem> statusDropdown = new List<SelectItem>();
    private List<SelectItem> rolesDropdown = new List<SelectItem>();

    protected override async Task OnInitializedAsync()
    {
        // Get database conection string
        strDefaultConnection = _configuration["ConnectionStrings:DefaultConnection"];

        // Get the current user
        CurrentUser = (await authenticationStateTask).User;

        if (CurrentUser.Identity.IsAuthenticated)
        {
            IsAuthenticated = true;
            IsAdmin = UtilitySecurity.IsAdministrator(CurrentUser.Identity.Name ?? "", strDefaultConnection);
            objCurrentUser = UtilitySecurity.UserFromUserName(CurrentUser.Identity.Name, strDefaultConnection);
        }
        else
        {
            IsAdmin = false;
        }

        _RoleController = (RoleController)ScopedServices.GetService(typeof(RoleController));
        _TaskController = (TaskController)ScopedServices.GetService(typeof(TaskController));
        _CategoryTreeController = (CategoryTreeController)ScopedServices.GetService(typeof(CategoryTreeController));

        PopulateDropdowns();

        SelectedTaskForm = ConvertDTOTaskToDTOTaskForm(SelectedTask);

        colAllTags = _CategoryTreeController.GetCategoryTree(!IsAdmin, false, SelectedTaskForm.selectedTreeNodes ?? new List<int>());

        ShowManualUser = (SelectedTaskForm.RequesterUserId == -1);
    }

    private void PopulateDropdowns()
    {
        // ** Priority Dropdown
        priorityDropdown.Add(new SelectItem() { ItemLabel = "*All*", ItemStringValue = "ALL" });
        priorityDropdown.Add(new SelectItem() { ItemLabel = "Normal", ItemStringValue = "Normal" });
        priorityDropdown.Add(new SelectItem() { ItemLabel = "High", ItemStringValue = "High" });
        priorityDropdown.Add(new SelectItem() { ItemLabel = "Low", ItemStringValue = "Low" });

        // ** Status Dropdown
        statusDropdown.Add(new SelectItem() { ItemLabel = "*All*", ItemStringValue = "ALL" });
        statusDropdown.Add(new SelectItem() { ItemLabel = "New", ItemStringValue = "New" });
        statusDropdown.Add(new SelectItem() { ItemLabel = "Active", ItemStringValue = "Active" });
        statusDropdown.Add(new SelectItem() { ItemLabel = "Cancelled", ItemStringValue = "Cancelled" });
        statusDropdown.Add(new SelectItem() { ItemLabel = "On Hold", ItemStringValue = "On Hold" });
        statusDropdown.Add(new SelectItem() { ItemLabel = "Resolved", ItemStringValue = "Resolved" });

        // ** Roles Dropdown
        rolesDropdown.Add(new SelectItem() { ItemLabel = "*All*", ItemStringValue = "0" });

        var AllRoles = _RoleController.GetRoles();
        foreach (var role in AllRoles)
        {
            rolesDropdown.Add(new SelectItem() { ItemLabel = role.roleName, ItemStringValue = role.iD.ToString() });
        }
    }

    // Utility

    private DTOTask ConvertDTOTaskFormToDTOTask(DTOTaskForm Task)
    {
        DTOTask NewDTOTask = new DTOTask();

        NewDTOTask.description = Task.Description;
        NewDTOTask.status = Task.Status;
        NewDTOTask.priority = Task.Priority;
        NewDTOTask.createdDate = DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString();
        NewDTOTask.estimatedStart = (Task.EstimatedStart.HasValue) ? Task.EstimatedStart.Value.ToShortDateString() + " " + Task.EstimatedStart.Value.ToShortTimeString() : "";
        NewDTOTask.estimatedCompletion = (Task.EstimatedCompletion.HasValue) ? Task.EstimatedCompletion.Value.ToShortDateString() + " " + Task.EstimatedCompletion.Value.ToShortTimeString() : "";
        NewDTOTask.dueDate = (Task.DueDate.HasValue) ? Task.DueDate.Value.ToShortDateString() : "";
        NewDTOTask.assignedRoleId = (Task.AssignedRoleId != null) ? Convert.ToInt32(Task.AssignedRoleId) : null;
        NewDTOTask.requesterUserId = Task.RequesterUserId;
        NewDTOTask.requesterName = Task.RequesterName;
        NewDTOTask.requesterEmail = Task.RequesterEmail;
        NewDTOTask.requesterPhone = Task.RequesterPhone;
        NewDTOTask.estimatedHours = Task.EstimatedHours;
        NewDTOTask.selectedTreeNodes = Task.selectedTreeNodes;
        NewDTOTask.colDTOTaskDetail = new List<DTOTaskDetail>();

        //var NewDTOTaskDetail = new DTOTaskDetail();
        //NewDTOTaskDetail.description = Task.Description;
        //NewDTOTaskDetail.insertDate = DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString();
        //NewDTOTaskDetail.startTime = (NewTaskDetail.StartTime.HasValue) ? NewTaskDetail.StartTime.Value.ToShortDateString() + " " + NewTaskDetail.StartTime.Value.ToShortTimeString() : "";
        //NewDTOTaskDetail.stopTime = (NewTaskDetail.StopTime.HasValue) ? NewTaskDetail.StopTime.Value.ToShortDateString() + " " + NewTaskDetail.StopTime.Value.ToShortTimeString() : "";
        //NewDTOTaskDetail.userId = objCurrentUser.userId;
        //NewDTOTaskDetail.userName = NewTask.RequesterName;
        //NewDTOTask.colDTOTaskDetail.Add(NewDTOTaskDetail);

        return NewDTOTask;
    }

    private DTOTaskForm ConvertDTOTaskToDTOTaskForm(DTOTask Task)
    {
        DTOTaskForm NewDTOTaskForm = new DTOTaskForm();

        NewDTOTaskForm.Description = Task.description;
        NewDTOTaskForm.Status = Task.status;
        NewDTOTaskForm.Priority = Task.priority;
        NewDTOTaskForm.CreatedDate = (Task.createdDate != "") ? Convert.ToDateTime(Task.createdDate) : DateTime.Now;
        NewDTOTaskForm.EstimatedStart = (Task.estimatedStart != "") ? Convert.ToDateTime(Task.estimatedStart) : null;
        NewDTOTaskForm.EstimatedCompletion = (Task.estimatedCompletion != "") ? Convert.ToDateTime(Task.estimatedCompletion) : null;
        NewDTOTaskForm.DueDate = (Task.dueDate != "") ? Convert.ToDateTime(Task.dueDate) : null;
        NewDTOTaskForm.AssignedRoleId = (Task.assignedRoleId != null) ? Task.assignedRoleId.ToString() : "";
        NewDTOTaskForm.RequesterUserId = (Task.requesterUserId != -1) ? Task.requesterUserId.Value : -1;
        NewDTOTaskForm.RequesterName = Task.requesterName;
        NewDTOTaskForm.RequesterEmail = Task.requesterEmail;
        NewDTOTaskForm.RequesterPhone = Task.requesterPhone;
        NewDTOTaskForm.EstimatedHours = Task.estimatedHours;
        NewDTOTaskForm.selectedTreeNodes = Task.selectedTreeNodes;
        NewDTOTaskForm.colDTOTaskDetail = new List<DTOTaskDetail>();

        //var NewDTOTaskDetail = new DTOTaskDetail();
        //NewDTOTaskDetail.description = Task.Description;
        //NewDTOTaskDetail.insertDate = DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString();
        //NewDTOTaskDetail.startTime = (NewTaskDetail.StartTime.HasValue) ? NewTaskDetail.StartTime.Value.ToShortDateString() + " " + NewTaskDetail.StartTime.Value.ToShortTimeString() : "";
        //NewDTOTaskDetail.stopTime = (NewTaskDetail.StopTime.HasValue) ? NewTaskDetail.StopTime.Value.ToShortDateString() + " " + NewTaskDetail.StopTime.Value.ToShortTimeString() : "";
        //NewDTOTaskDetail.userId = objCurrentUser.userId;
        //NewDTOTaskDetail.userName = NewTask.RequesterName;
        //NewDTOTaskForm.colDTOTaskDetail.Add(NewDTOTaskDetail);

        return NewDTOTaskForm;
    }

    private void ClearUser()
    {
        SelectedTaskForm.RequesterUserId = -1;
        ShowManualUser = true;
    }

    private async void SetUser()
    {
        DTOUser result = await DialogService.OpenAsync<TicketUserSelector>($"Select User",
            null,
            new DialogOptions() { Width = "90%" });

        if (result != null)
        {
            DTOUser ReturnUser = (DTOUser)result;
            SelectedTaskForm.RequesterUserId = ReturnUser.userId;
            ShowManualUser = false;
            StateHasChanged();
        }
    }
}

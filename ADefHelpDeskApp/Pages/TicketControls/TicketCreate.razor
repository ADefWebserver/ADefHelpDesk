@inherits OwningComponentBase
@using ADefHelpDeskApp.Models
@using ADefHelpDeskApp.Classes
@using AdefHelpDeskBase.Controllers
@using AdefHelpDeskBase.Models
@using AdefHelpDeskBase.Models.DataContext
@using ADefHelpDeskApp.Controllers
@using ADefHelpDeskApp.Controllers.InternalApi
@using Microsoft.AspNetCore.Hosting
@using Microsoft.AspNetCore.Http;
@using Microsoft.EntityFrameworkCore
@using Excubo.Blazor.TreeViews
@using System.Linq
@using System.Net.Http.Headers
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Forms
@using System.IO
@using System.Text
@inject IConfiguration _configuration
@inject IWebHostEnvironment _IWebHostEnvironment
@inject IJSRuntime JSRuntime
@inject ADefHelpDeskContext context
@inject TaskController _TaskController
@inject RoleController _RoleController
@inject CategoryTreeController _CategoryTreeController
@inject ApplicationSettingsController _ApplicationSettingsController
@inject UploadTaskController _UploadTaskController
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject IFileReaderService fileReaderService
@inject IJSRuntime CurrentJSRuntime
<div class="row">
    <div class="col-xl-6 col-lg-6 py-2">
        <RadzenTabs RenderMode="TabRenderMode.Server">
            <Tabs>
                <RadzenTabsItem Text="New Ticket">
                    <table class="form-group" cellpadding="4" cellspacing="4">
                        <tbody>
                            @if (IsAdmin)
                            {
                                <tr>
                                    <td></td>
                                    <td>
                                        @if (objCurrentUser.userId != -1)
                                        {
                                            <a href="javascript: void(0)" @onclick="ClearUser"><b>[Clear User]</b></a>
                                        }
                                        else
                                        {
                                            <a href="javascript: void(0)" @onclick="SetUser"><b>[Set User]</b></a>
                                        }
                                    </td>
                                </tr>
                            }
                            <tr>
                                <td>
                                    <b>Name:</b>
                                </td>
                                <td>
                                    @if (!ShowManualUser)
                                    {
                                        @($"{objCurrentUser.firstName} {objCurrentUser.lastName}  ")
                                    }
                                    else
                                    {
                                        <RadzenTextBox @bind-Value=NewTask.RequesterName style="width: 100%;" />
                                    }
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <b>Email:</b>
                                </td>
                                <td>
                                    @if (!ShowManualUser)
                                    {
                                        @($"{objCurrentUser.email}")
                                    }
                                    else
                                    {
                                        <RadzenTextBox @bind-Value=NewTask.RequesterEmail style="width: 100%;" />
                                    }
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <b>Phone:</b>
                                </td>
                                <td>
                                    <RadzenTextBox @bind-Value=NewTask.RequesterPhone style="width: 100%;" />
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <b>Descriptionn:</b>
                                </td>
                                <td>
                                    <RadzenTextBox @bind-Value=NewTask.Description style="width: 100%;" />
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <b>Due Date:</b>
                                </td>
                                <td>
                                    <RadzenDatePicker @bind-Value=@NewTask.DueDate DateFormat="d" />
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <b>Priority:</b>
                                </td>
                                <td>
                                    <RadzenDropDown Data=@priorityDropdown @bind-Value=@NewTask.Priority
                                                    TextProperty="ItemLabel"
                                                    ValueProperty="ItemStringValue"
                                                    Style="width:300px" />
                                </td>
                            </tr>
                            @if
                            (
                            (FileUploadPermission == "All")
                            ||
                            ((CurrentUser.Identity.IsAuthenticated) && (FileUploadPermission == "Administrator/Registered Users"))
                            ||
                            ((IsAdmin == true) && (FileUploadPermission == "Administrator"))
                            )
                            {
                                <tr>
                                    <td>
                                        <b>File Upload:</b>
                                    </td>
                                    <td>
                                        <input type="file" @ref=inputElement />
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </RadzenTabsItem>
                @if (IsAdmin == true)
                {
                    <RadzenTabsItem Text="Ticket Details">
                        <table class="form-group" cellpadding="4" cellspacing="4">
                            <tbody>
                                <tr>
                                    <td>
                                        <b>Status:</b>
                                    </td>
                                    <td>
                                        <RadzenDropDown Data=@statusDropdown @bind-Value=@NewTask.Status
                                                    TextProperty="ItemLabel"
                                                    ValueProperty="ItemStringValue"
                                                    Style="width:300px" />
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <b>Assigned Role:</b>
                                    </td>
                                    <td>
                                        <RadzenDropDown Data=@rolesDropdown @bind-Value=@NewTask.AssignedRoleId
                                                    TextProperty="ItemLabel"
                                                    ValueProperty="ItemStringValue"
                                                    Style="width:300px" />
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <b>Estimated Start:</b>
                                    </td>
                                    <td>
                                        <RadzenDatePicker @bind-Value=@NewTask.EstimatedStart TValue="DateTime?" ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm" />
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <b>Estimated End:</b>
                                    </td>
                                    <td>
                                        <RadzenDatePicker @bind-Value=@NewTask.EstimatedCompletion TValue="DateTime?" ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm" />
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <b>Estimated Hours:</b>
                                    </td>
                                    <td>
                                        <RadzenNumeric @bind-Value=@NewTask.EstimatedHours TValue="int?" Min="0" Max="10000" />
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <b>Start Time:</b>
                                    </td>
                                    <td>
                                        <RadzenDatePicker @bind-Value=@NewTaskDetail.StartTime TValue="DateTime?" ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm" />
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <b>Stop Time:</b>
                                    </td>
                                    <td>
                                        <RadzenDatePicker @bind-Value=@NewTaskDetail.StopTime TValue="DateTime?" ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm" />
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </RadzenTabsItem>
                }
            </Tabs>
        </RadzenTabs>
    </div>

    <div class="col-xl-6 col-lg-6 py-2">
        <!-- Tree Node Control -->
        <TreeView Items="colAllTags"
                  GetChildren="(treenode) => treenode.children">
            <ItemTemplate Context="treenode">
                &nbsp;
                @if (@treenode.Item.data.selectable)
                {
                    <RadzenCheckBox @bind-Value=@treenode.Item.data.CheckboxChecked
                                TValue="bool"
                                @onclick:stopPropagation="true" />
                }
                &nbsp;@treenode.Item.label
            </ItemTemplate>
        </TreeView>
    </div>

</div>
<br />
<div class="row">
    <div class="col">
        @if (!@showWaitGraphic)
        {
            <RadzenButton Text="Save" ButtonStyle="ButtonStyle.Success"
                      Click="Save"
                      Style="margin-bottom: 10px; width: 150px" />
        } &nbsp;
    </div>
</div>
<div class="row">
    <div class="col">
        @if (@Message != "")
        {
            <h4 style="color:red">@Message</h4>
        }
    </div>
</div>
@if (@showWaitGraphic)
{
    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
}
@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    public int ticketnumber { get; set; }

    [Parameter]
    public string ticketPassword { get; set; }

    private bool IsAdmin = false;
    private System.Security.Claims.ClaimsPrincipal CurrentUser;
    private string strDefaultConnection = "";
    private bool showWaitGraphic = false;
    private string Message = "";

    IFormFile FormFile;
    ElementReference inputElement;
    MemoryStream FileMemoryStream;

    public string ApplicationName = "";
    public string ApplicationGUID = "";
    public string FileUploadPermission = "";

    private bool ShowManualUser = true;
    private DTOUser objCurrentUser = new DTOUser() { userId = -1 };
    private DTOTaskForm NewTask = new DTOTaskForm();
    private DTOTaskDetailForm NewTaskDetail = new DTOTaskDetailForm();
    private List<CategoryDTO> colAllTags = new List<CategoryDTO>();

    private List<SelectItem> priorityDropdown = new List<SelectItem>();
    private List<SelectItem> statusDropdown = new List<SelectItem>();
    private List<SelectItem> rolesDropdown = new List<SelectItem>();

    List<RoleDTO> AllRoles = new List<RoleDTO>();

    protected override async Task OnInitializedAsync()
    {
        // Get database conection string
        strDefaultConnection = _configuration["ConnectionStrings:DefaultConnection"];

        // Get the current user
        CurrentUser = (await authenticationStateTask).User;

        if (CurrentUser.Identity != null)
        {
            objCurrentUser = UtilitySecurity.UserFromUserName(CurrentUser.Identity.Name, strDefaultConnection);
        }

        if (CurrentUser.Identity.IsAuthenticated)
        {
            ShowManualUser = false;
            IsAdmin = UtilitySecurity.IsAdministrator(CurrentUser.Identity.Name ?? "", strDefaultConnection);
        }
        else
        {
            IsAdmin = false;
        }

        _ApplicationSettingsController = (ApplicationSettingsController)ScopedServices.GetService(typeof(ApplicationSettingsController));
        _RoleController = (RoleController)ScopedServices.GetService(typeof(RoleController));
        _CategoryTreeController = (CategoryTreeController)ScopedServices.GetService(typeof(CategoryTreeController));
        _UploadTaskController = (UploadTaskController)ScopedServices.GetService(typeof(UploadTaskController));
        _TaskController = (TaskController)ScopedServices.GetService(typeof(TaskController));

        populateDropdowns();

        colAllTags = _CategoryTreeController.GetCategoryTree(!IsAdmin, true, new List<int>());

        if(ticketPassword != null)
        {
            EditTask(ticketnumber, ticketPassword);
        }
    }

    private void populateDropdowns()
    {
        // ** Priority Dropdown
        priorityDropdown.Add(new SelectItem() { ItemLabel = "Normal", ItemStringValue = "Normal" });
        priorityDropdown.Add(new SelectItem() { ItemLabel = "High", ItemStringValue = "High" });
        priorityDropdown.Add(new SelectItem() { ItemLabel = "Low", ItemStringValue = "Low" });

        NewTask.Priority = "Normal";

        // ** Status Dropdown
        statusDropdown.Add(new SelectItem() { ItemLabel = "New", ItemStringValue = "New" });
        statusDropdown.Add(new SelectItem() { ItemLabel = "Active", ItemStringValue = "Active" });
        statusDropdown.Add(new SelectItem() { ItemLabel = "Cancelled", ItemStringValue = "Cancelled" });
        statusDropdown.Add(new SelectItem() { ItemLabel = "On Hold", ItemStringValue = "On Hold" });
        statusDropdown.Add(new SelectItem() { ItemLabel = "Resolved", ItemStringValue = "Resolved" });

        NewTask.Status = "New";

        // ** Roles Dropdown
        rolesDropdown.Add(new SelectItem() { ItemLabel = "[Unassigned]", ItemStringValue = "0" });
        AllRoles = _RoleController.GetRoles();
        foreach (var role in AllRoles)
        {
            rolesDropdown.Add(new SelectItem() { ItemLabel = role.roleName, ItemStringValue = role.iD.ToString() });
        }

        NewTask.AssignedRoleId = "0";

        // Get current settings
        GetCurrentSettings();
    }

    private void GetCurrentSettings()
    {
        var DTOSettings = _ApplicationSettingsController.GetSettings(CurrentUser.Identity.Name, NavigationManager.BaseUri);

        ApplicationName = DTOSettings.applicationName;
        ApplicationGUID = DTOSettings.applicationGUID;
        FileUploadPermission = DTOSettings.uploadPermission;

        StateHasChanged();
    }

    public async Task ReadFileIntoMemory()
    {
        FormFile = null;
        var files = await fileReaderService.CreateReference(inputElement).EnumerateFilesAsync();

        if (files.Count() > 0)
        {
            var fileInfo = await files.FirstOrDefault().ReadFileInfoAsync();
            FileMemoryStream = await files.FirstOrDefault().CreateMemoryStreamAsync();
            FormFile = new FormFile(FileMemoryStream, 0, fileInfo.Size, fileInfo.Name, fileInfo.Name);
        }
    }

    private async void Save()
    {
        try
        {
            Message = "";
            showWaitGraphic = true;
            StateHasChanged();

            // Get Selected Tree Nodes
            var SelectedTreeNodes = _CategoryTreeController.GetSelected(colAllTags);

            // Get File
            await ReadFileIntoMemory();

            // Get the form values - - Convert DTOTaskForm to DTOTask
            DTOTask NewDTOTask = new DTOTask();

            NewDTOTask.description = NewTask.Description;
            NewDTOTask.status = NewTask.Status;
            NewDTOTask.priority = NewTask.Priority;
            NewDTOTask.createdDate = DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString();
            NewDTOTask.estimatedStart = (NewTask.EstimatedStart.HasValue) ? NewTask.EstimatedStart.Value.ToShortDateString() + " " + NewTask.EstimatedStart.Value.ToShortTimeString() : "";
            NewDTOTask.estimatedCompletion = (NewTask.EstimatedCompletion.HasValue) ? NewTask.EstimatedCompletion.Value.ToShortDateString() + " " + NewTask.EstimatedCompletion.Value.ToShortTimeString() : "";
            NewDTOTask.dueDate = (NewTask.DueDate.HasValue) ? NewTask.DueDate.Value.ToShortDateString() : "";
            NewDTOTask.assignedRoleId = (NewTask.AssignedRoleId != null) ? Convert.ToInt32(NewTask.AssignedRoleId) : null;
            NewDTOTask.requesterUserId = (objCurrentUser.userId != -1) ? objCurrentUser.userId : null;
            NewDTOTask.requesterName = NewTask.RequesterName;
            NewDTOTask.requesterEmail = NewTask.RequesterEmail;
            NewDTOTask.requesterPhone = NewTask.RequesterPhone;
            NewDTOTask.estimatedHours = NewTask.EstimatedHours;
            NewDTOTask.selectedTreeNodes = SelectedTreeNodes;
            NewDTOTask.colDTOTaskDetail = new List<DTOTaskDetail>();

            var NewDTOTaskDetail = new DTOTaskDetail();
            NewDTOTaskDetail.description = NewTask.Description;
            NewDTOTaskDetail.insertDate = DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString();
            NewDTOTaskDetail.startTime = (NewTaskDetail.StartTime.HasValue) ? NewTaskDetail.StartTime.Value.ToShortDateString() + " " + NewTaskDetail.StartTime.Value.ToShortTimeString() : "";
            NewDTOTaskDetail.stopTime = (NewTaskDetail.StopTime.HasValue) ? NewTaskDetail.StopTime.Value.ToShortDateString() + " " + NewTaskDetail.StopTime.Value.ToShortTimeString() : "";
            NewDTOTaskDetail.userId = objCurrentUser.userId;
            NewDTOTaskDetail.userName = NewTask.RequesterName;
            NewDTOTask.colDTOTaskDetail.Add(NewDTOTaskDetail);

            // Get additional values
            int intUserId = (objCurrentUser.userId != -1) ? objCurrentUser.userId : -1;
            bool IsSuperUser = false;
            bool IsAdministrator = false;
            string strCurrentUser = "[Unauthenticated]";
            string CurrentHostLocation = NavigationManager.BaseUri;

            if (CurrentUser.Identity.IsAuthenticated)
            {
                strCurrentUser = objCurrentUser.userName;
                IsSuperUser = UtilitySecurity.IsSuperUser(strCurrentUser, strDefaultConnection);
                IsAdministrator = UtilitySecurity.IsAdministrator(strCurrentUser, strDefaultConnection);
            }

            // Call the service
            DTOStatus result = _UploadTaskController.CreateTaskMethod(
                strDefaultConnection, CurrentHostLocation, _IWebHostEnvironment.ContentRootPath,
                NewDTOTask, FormFile, strCurrentUser, intUserId, IsSuperUser, IsAdministrator,
                CurrentUser.Identity.IsAuthenticated);

            // Was update successful?
            if (!result.Success)
            {
                Message = result.StatusMessage;
                showWaitGraphic = false;
                StateHasChanged();
                return;
            }
            else
            {
                Message = "Saved";
            }

            try
            {
                if (FileMemoryStream != null)
                {
                    FileMemoryStream.Dispose();
                }
            }
            catch { }

            await SetNewTaskForm();

            showWaitGraphic = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            showWaitGraphic = false;
            Message = ex.Message;
            StateHasChanged();
            return;
        }
    }

    // Utility

    private void ClearUser()
    {
        objCurrentUser.userId = -1;
        ShowManualUser = true;
    }

    private async void SetUser()
    {
        DTOUser result = await DialogService.OpenAsync<TicketUserSelector>($"Select User",
            null,
            new DialogOptions() { Width = "90%" });

        if (result != null)
        {
            objCurrentUser = (DTOUser)result;
            ShowManualUser = false;
            StateHasChanged();
        }
    }

    public async Task SetNewTaskForm()
    {
        FormFile = null;
        NewTask = new DTOTaskForm();
        NewTaskDetail = new DTOTaskDetailForm();
        NewTask.Priority = "Normal";
        NewTask.Status = "New";
        NewTask.AssignedRoleId = "0";

        await fileReaderService.CreateReference(inputElement).ClearValue();

        colAllTags = _CategoryTreeController.GetCategoryTree(!IsAdmin, false, new List<int>());
        StateHasChanged();
    }

    void EditTask(int taskId, string ticketPassword)
    {
        Message = "";

        try
        {
            DTOTask objTask = new DTOTask();
            objTask.taskId = taskId;
            objTask.ticketPassword = ticketPassword;
            var SelectedTask = _TaskController.RetrieveTask(objTask, CurrentUser.Identity.Name ?? "", CurrentUser.Identity.IsAuthenticated);

            if (SelectedTask.taskId != -1)
            {
                DialogService.Open<TicketEditControl>($"Edit Ticket # {SelectedTask.taskId}",
                new Dictionary<string, object>() { { "SelectedTask", SelectedTask } },
                new DialogOptions() { Width = "650px" });
            }
            else
            {
                Message = $"Ticket # {taskId} not found";
            }
        }
        catch(Exception ex)
        {
            Message = ex.GetBaseException().Message;
        }
    }
}

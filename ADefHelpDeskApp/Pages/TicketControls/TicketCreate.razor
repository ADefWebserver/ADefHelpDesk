@using ADefHelpDeskApp.Classes
@using AdefHelpDeskBase.Models.DataContext
@using Microsoft.EntityFrameworkCore
@inject IConfiguration _configuration
@inject IJSRuntime JSRuntime
@inject ADefHelpDeskContext context

<RadzenTabs RenderMode="TabRenderMode.Server">
	<Tabs>
		<RadzenTabsItem Text="New Ticket">
			<div class="container">
				<div class="row">
					<div class="col">
						<b>Name:</b>&nbsp;
					</div>
					<div class="col">
						<label class="control-label" style="font-weight: bold">Label: </label>
					</div>
				</div>
				<div class="row">
					<div class="col">
						<b>Name:</b>&nbsp;
					</div>
					<div class="col">
						<label class="control-label" style="font-weight: bold">Label: </label>
					</div>
				</div>
			</div>
			<div class="row">
				<div class="col">
					<b>Email:</b>&nbsp;
				</div>
				<div class="col">
					<label class="control-label" style="font-weight: bold">Label: </label>
				</div>
			</div>
			<div class="row">
				<div class="col">
					<b>Phone:</b>&nbsp;
				</div>
				<div class="col">
					<label class="control-label" style="font-weight: bold">Label: </label>
				</div>
			</div>
			<div class="row">
				<div class="col">
					<b>Description:</b>&nbsp;
				</div>
				<div class="col">
					<label class="control-label" style="font-weight: bold">Label: </label>
				</div>
			</div>
			<div class="row">
				<div class="col">
					<b>Detail:</b>&nbsp;
				</div>
				<div class="col">
					<label class="control-label" style="font-weight: bold">Label: </label>
				</div>
			</div>
			<div class="row">
				<div class="col">
					<b>Due Date:</b>&nbsp;
				</div>
				<div class="col">
					<label class="control-label" style="font-weight: bold">Label: </label>
				</div>
			</div>
			<div class="row">
				<div class="col">
					<b>Priority:</b>&nbsp;
				</div>
				<div class="col">
					<label class="control-label" style="font-weight: bold">Label: </label>
				</div>
			</div>
			<div class="row">
				<div class="col">
					&nbsp;
				</div>
				<div class="col">
					<label class="control-label" style="font-weight: bold">Label: </label>
				</div>
			</div>
		</RadzenTabsItem>
		<RadzenTabsItem Text="Ticket Details">
			<div class="container">
				<div class="row">
					<div class="col">
						<b>Status:</b>&nbsp;
					</div>
					<div class="col">
						<label class="control-label" style="font-weight: bold">Label: </label>
					</div>
				</div>
				<div class="row">
					<div class="col">
						<b>Assigned Role:</b>&nbsp;
					</div>
					<div class="col">
						<label class="control-label" style="font-weight: bold">Label: </label>
					</div>
				</div>
			</div>
			<div class="row">
				<div class="col">
					<b>Estimated Start:</b>&nbsp;
				</div>
				<div class="col">
					<label class="control-label" style="font-weight: bold">Label: </label>
				</div>
			</div>
			<div class="row">
				<div class="col">
					<b>Estimated Completion:</b>&nbsp;
				</div>
				<div class="col">
					<label class="control-label" style="font-weight: bold">Label: </label>
				</div>
			</div>
			<div class="row">
				<div class="col">
					<b>Estimated Hours:</b>&nbsp;
				</div>
				<div class="col">
					<label class="control-label" style="font-weight: bold">Label: </label>
				</div>
			</div>
			<div class="row">
				<div class="col">
					<b>Start Time:</b>&nbsp;
				</div>
				<div class="col">
					<label class="control-label" style="font-weight: bold">Label: </label>
				</div>
			</div>
			<div class="row">
				<div class="col">
					<b>Stop Time:</b>&nbsp;
				</div>
				<div class="col">
					<label class="control-label" style="font-weight: bold">Label: </label>
				</div>
			</div>
		</RadzenTabsItem>
	</Tabs>
</RadzenTabs>

<div>
	<!-- Tree Node Control -->
</div>
<br />
<div class="row">
	<div class="col">
		<RadzenButton Text="Save" ButtonStyle="ButtonStyle.Success"
					  Style="margin-bottom: 10px; width: 150px" />
		&nbsp;
	</div>
</div>

@code {
	[CascadingParameter]
	private Task<AuthenticationState> authenticationStateTask { get; set; }

	bool IsAdmin = false;
	System.Security.Claims.ClaimsPrincipal CurrentUser;
	string strDefaultConnection = "";

	protected override async Task OnInitializedAsync()
	{
		// Get database conection string
		strDefaultConnection = _configuration["ConnectionStrings:DefaultConnection"];

		// Get the current user
		CurrentUser = (await authenticationStateTask).User;

		IsAdmin = await IsAdminAsync();
	}

	public async Task<bool> IsAdminAsync()
	{
		bool result = false;

		var optionsBuilder = new DbContextOptionsBuilder<ADefHelpDeskContext>();
		optionsBuilder.UseSqlServer(strDefaultConnection);

		using (var context = new ADefHelpDeskContext(optionsBuilder.Options))
		{
			try
			{
				// Get the user
				var objUser = await (from user in context.AdefHelpDeskUsers
										where user.Username.ToLower() == CurrentUser.Identity.Name.ToLower()
										where user.IsSuperUser == true
										select user).FirstOrDefaultAsync();

				if (objUser != null)
				{
					result = true;
				}
				else
				{
					result = false;
				}
			}
			catch
			{
				result = false;
			}
		}

		return result;
	}
}

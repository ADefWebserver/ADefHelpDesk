@inherits OwningComponentBase
@using ADefHelpDeskApp.Models
@using ADefHelpDeskApp.Classes
@using AdefHelpDeskBase.Controllers
@using AdefHelpDeskBase.Models
@using AdefHelpDeskBase.Models.DataContext
@using ADefHelpDeskApp.Controllers
@using ADefHelpDeskApp.Controllers.InternalApi
@using Microsoft.AspNetCore.Hosting
@using Microsoft.AspNetCore.Http;
@using Microsoft.EntityFrameworkCore
@using Excubo.Blazor.TreeViews
@using System.Linq
@using System.Net.Http.Headers
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Forms
@using System.IO
@using System.Text
@using Newtonsoft.Json
@inject IConfiguration _configuration
@inject HttpClient _client
@inject IWebHostEnvironment _IWebHostEnvironment
@inject IJSRuntime JSRuntime
@inject ADefHelpDeskContext context
@inject RoleController _RoleController
@inject CategoryTreeController _CategoryTreeController
@inject LogController _LogController
@inject ApplicationSettingsController _ApplicationSettingsController
@inject TaskController _TaskController
@inject UploadTaskController _UploadTaskController
@inject SearchParametersController _SearchParametersController
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject IFileReaderService fileReaderService
@inject IJSRuntime CurrentJSRuntime
<div style="height: 300px;max-height: 90%">
    @if (@Message != "")
    {
        <h4 style="color:red">@Message</h4>
    }
    @if (@showWaitGraphic)
    {
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
    }
    <div class="col-xl-12 col-lg-12 py-2">
        @if (@IsAdmin)
        {
            <RadzenCheckBox @bind-Value=@boolVisibleToRequester Name="VisibleToRequester" TValue="bool" Style="margin-bottom: 10px" />
            <RadzenLabel Text="Visible to requester" Component="VisibleToRequester" Style="margin-left: 8px; vertical-align: middle; margin-bottom: 10px" />
        }
        <div>
            @if ((@IsAdmin) || (@SelectedTaskDetail.detailId == -1))
            {
                @if (!@showWaitGraphic)
                {
                    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="save" Click=@(() => SaveComment()) Text="Save" Style="margin-bottom: 10px" />
                }
            }
            @if (@IsAdmin)
            {
                <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="mail" Click=@(() => SaveCommentEmail()) Text="Save and Email" Style="margin-bottom: 10px" />
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Click=@(() => DeleteComment()) Text="Delete" Style="margin-bottom: 10px" />
            }
        </div>
        @if (((@IsAdmin) && (@SelectedTaskDetail.contentType != "EML")) || (@SelectedTaskDetail.detailId == -1))
        {
            <div>
                <RadzenTextArea @bind-Value=SelectedTaskDetail.description Cols="60" Rows="5" />
            </div>
        }
        @if ((!@IsAdmin) && (@SelectedTaskDetail.contentType != "EML") && (@SelectedTaskDetail.detailId > -1))
        {
            <div style="height: 200px; width: 50%;">
                @((MarkupString)SelectedTaskDetail.description)
            </div>
        }
        @if (@SelectedTaskDetail.contentType == "EML")
        {
            <div>
                @((MarkupString)SelectedTaskDetail.emailDescription)
            </div>
            <div>
                @if (@showWaitAttachmentGraphic)
                {
                    <br />
                    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
                }
                else
                {
                    <RadzenDataList WrapItems="true" AllowPaging="true" Data="SelectedTaskDetail.colDTOAttachment" TItem="DTOAttachment" PageSize="1">
                        <Template Context="attachment">
                            <div style="text-align:center">
                                <RadzenButton Click=@(() => DownloadAttachment(attachment)) Text="@attachment.fileName" Icon="download" ButtonStyle="ButtonStyle.Light" />
                                <span>&nbsp;&nbsp;&nbsp;</span>
                            </div>
                        </Template>
                    </RadzenDataList>
                }
            </div>
        }
        <!-- File Upload  -->
        @if ((@SelectedTaskDetail.detailType != "Work") && (@SelectedTaskDetail.detailId == -1))
        {
            <div>
                @if
               (
               (FileUploadPermission == "All")
               ||
               ((CurrentUser.Identity.IsAuthenticated) && (FileUploadPermission == "Administrator/Registered Users"))
               ||
               ((IsAdmin == true) && (FileUploadPermission == "Administrator"))
               )
                {
                    <input type="file" @ref=inputElement />
                }
            </div>
        }
    </div>
</div>
@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    public DTOTask SelectedTask { get; set; }

    [Parameter]
    public DTOTaskDetail SelectedTaskDetail { get; set; }

    private bool IsAuthenticated = false;
    private bool IsAdmin = false;
    private bool boolVisibleToRequester = true;
    private System.Security.Claims.ClaimsPrincipal CurrentUser;
    private DTOUser objCurrentUser = new DTOUser() { userId = -1 };
    private string strDefaultConnection;
    private string CurrentHostLocation = "";

    private bool showWaitGraphic = false;
    private bool showWaitAttachmentGraphic = false;
    private string Message = "";

    IFormFile FormFile;
    ElementReference inputElement;
    MemoryStream FileMemoryStream;
    public string FileUploadPermission = "";

    protected override async Task OnInitializedAsync()
    {
        // Get database conection string
        strDefaultConnection = _configuration["ConnectionStrings:DefaultConnection"];

        // Get the current user
        CurrentUser = (await authenticationStateTask).User;

        if (CurrentUser.Identity.IsAuthenticated)
        {
            IsAuthenticated = true;
            IsAdmin = UtilitySecurity.IsAdministrator(CurrentUser.Identity.Name ?? "", strDefaultConnection);
            objCurrentUser = UtilitySecurity.UserFromUserName(CurrentUser.Identity.Name, strDefaultConnection);
        }
        else
        {
            IsAdmin = false;
        }

        _RoleController = (RoleController)ScopedServices.GetService(typeof(RoleController));
        _TaskController = (TaskController)ScopedServices.GetService(typeof(TaskController));
        _UploadTaskController = (UploadTaskController)ScopedServices.GetService(typeof(UploadTaskController));
        _CategoryTreeController = (CategoryTreeController)ScopedServices.GetService(typeof(CategoryTreeController));
        _LogController = (LogController)ScopedServices.GetService(typeof(LogController));

        CurrentHostLocation = NavigationManager.BaseUri;

        // Get current settings
        GetCurrentSettings();
    }

    private async void DownloadAttachment(DTOAttachment paramAttachment)
    {
        showWaitAttachmentGraphic = true;
        StateHasChanged();

        var url = new Uri($"{NavigationManager.BaseUri}api/Files/ReturnFile");

        var request = new DTOFileParameter();
        request.attachmentID = paramAttachment.attachmentID;
        request.emailFileName = paramAttachment.fileName;
        request.detailId = SelectedTaskDetail.detailId;
        request.portalId = -1;
        request.taskId = SelectedTask.taskId ?? -1;
        request.ticketPassword = SelectedTask.ticketPassword;

        var myContent = JsonConvert.SerializeObject(request);
        var buffer = System.Text.Encoding.UTF8.GetBytes(myContent);
        var byteContent = new ByteArrayContent(buffer);
        byteContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");

        var response = await _client.PostAsync(url, byteContent);

        showWaitAttachmentGraphic = false;
        StateHasChanged();

        // Perhaps try to show content in a popup?
        var fileName = response.Content.Headers.ContentDisposition.FileNameStar;
        var FileContent = response.Content.ReadAsByteArrayAsync();
        var FileResult = FileContent.Result;

        using (var stream = await response.Content.ReadAsStreamAsync())
        {
            using var streamRef = new DotNetStreamReference(stream: stream);
            await JSRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
        }
    }

    private void GetCurrentSettings()
    {
        var DTOSettings = _ApplicationSettingsController.GetSettings(CurrentUser.Identity.Name, NavigationManager.BaseUri);

        FileUploadPermission = DTOSettings.uploadPermission;

        StateHasChanged();
    }

    private async Task SaveComment()
    {
        try
        {
            Message = "";
            showWaitGraphic = true;
            StateHasChanged();

            // Get additional values
            int intUserId = (objCurrentUser.userId != -1) ? objCurrentUser.userId : -1;
            bool IsSuperUser = false;
            bool IsAdministrator = false;
            string strCurrentUser = "[Unauthenticated]";

            // Get File
            await ReadFileIntoMemory();

            // Set Detail Visibility (because Admin can change it)
            if (SelectedTaskDetail.detailType != "Work")
            {
                SelectedTaskDetail.detailType = (boolVisibleToRequester) ? "Comment - Visible" : "Comment";
            }

            // Clear any Task Details
            SelectedTask.colDTOTaskDetail = new List<DTOTaskDetail>();
            //Add existing Task Detail
            SelectedTask.colDTOTaskDetail.Add(SelectedTaskDetail);

            // Call the service
            var result = _UploadTaskController.InsertUpdateTaskDetailMethod(
                strDefaultConnection, CurrentHostLocation, _IWebHostEnvironment.ContentRootPath,
                SelectedTask, FormFile, strCurrentUser, intUserId, IsSuperUser, IsAdministrator, strCurrentUser,
                CurrentUser.Identity.IsAuthenticated);

            // Was update successful?
            if (!result.isSuccess)
            {
                Message = result.message;
                showWaitGraphic = false;
                StateHasChanged();
                return;
            }
            else
            {
                DialogService.Close(result.taskDetail);
            }
        }
        catch (Exception ex)
        {
            Message = ex.GetBaseException().Message;
            showWaitGraphic = false;
            StateHasChanged();
        }
    }

    private void SaveCommentEmail()
    {

    }

    private void DeleteComment()
    {

    }

    // Utility

    public async Task ReadFileIntoMemory()
    {
        FormFile = null;
        var files = await fileReaderService.CreateReference(inputElement).EnumerateFilesAsync();

        if (files.Count() > 0)
        {
            var fileInfo = await files.FirstOrDefault().ReadFileInfoAsync();
            FileMemoryStream = await files.FirstOrDefault().CreateMemoryStreamAsync();
            FormFile = new FormFile(FileMemoryStream, 0, fileInfo.Size, fileInfo.Name, fileInfo.Name);
        }
    }
    }
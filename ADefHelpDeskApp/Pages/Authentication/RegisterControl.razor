@page "/registercontrol"
@inherits OwningComponentBase
@using ADefHelpDeskApp.Controllers
@using AdefHelpDeskBase.Controllers
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Hosting;
@using ADefHelpDeskApp.Data;
@using ADefHelpDeskApp.Data.Models;
@using AdefHelpDeskBase.Models;
@using AdefHelpDeskBase.Models.DataContext;
@using ADefHelpDeskApp.Classes;
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.AspNetCore.Http;
@using System.Text.Json
@using System.Text.Json.Serialization;
@using System.IO
@using System.Text
@inject RegisterController _RegisterController
@inject ApplicationSettingsController _ApplicationSettingsController
@inject IConfiguration _configuration
@inject IWebHostEnvironment _HostEnvironment
@inject UserManager<ApplicationUser> _UserManager
@inject SignInManager<ApplicationUser> _SignInManager
@inject RoleManager<IdentityRole> _RoleManager
@inject ADefHelpDeskContext _ADefHelpDeskService
@inject IHttpContextAccessor httpContextAccessor
@inject IHttpClientFactory ClientFactory
@inject HttpClient Http
@inject NavigationManager NavigationManager
@if (!UserCreated)
{
    <h4>Register</h4>
    @if (AllowRegistration)
    {
        <table class="form-group" cellpadding="4" cellspacing="4">
            <tbody>
                <tr>
                    <td>
                        <label for="Title" class="control-label" style="font-weight: bold">Username: </label>
                    </td>
                    <td>
                        <input id="Username" class="form-control" @bind="strUserName" />
                    </td>
                </tr>
                <tr>
                    <td>
                        <label for="Title" class="control-label" style="font-weight: bold">First Name: </label>
                    </td>
                    <td>
                        <input size="50" id="FirstName" class="form-control" @bind="strFirstName" />
                    </td>
                </tr>
                <tr>
                    <td>
                        <label for="Title" class="control-label" style="font-weight: bold">Last Name: </label>
                    </td>
                    <td>
                        <input size="50" id="LastName" class="form-control" @bind="strLastName" />
                    </td>
                </tr>
                <tr>
                    <td>
                        <label for="Title" class="control-label" style="font-weight: bold">Email Address: </label>
                    </td>
                    <td>
                        <input size="50" type="email" id="Email" class="form-control" @bind="strEmail" />
                    </td>
                </tr>
                <tr>
                    <td>
                        <label for="Title" class="control-label" style="font-weight: bold">Password: </label>
                    </td>
                    <td>
                        <input type="password" id="Password" class="form-control" @bind="strPassword" />
                    </td>
                </tr>
                <tr>
                    <td>
                        <button type="button" label="Register"
                        class="btn btn-success"
                        @onclick="CreateUser">
                            Register
                        </button>
                    </td>
                </tr>
            </tbody>
        </table>
    }
    else
    {
        <h4 style="color:red">Registration Not Allowed</h4>
    }
}
@if (@Message != "")
{
    <h4 style="color:red">@Message</h4>
    <br />
    <button type="button" class="btn btn-primary" @onclick="Continue">[Click Here To Continue]</button>
}
@code {
    bool AllowRegistration = false;
    bool UserCreated = false;
    string Message = "";

    string strUserName = "";
    string strFirstName = "";
    string strLastName = "";
    string strEmail = "";
    string strPassword = "";

    protected override void OnInitialized()
    {
        _RegisterController = (RegisterController)ScopedServices.GetService(typeof(RegisterController));
        _ApplicationSettingsController = (ApplicationSettingsController)ScopedServices.GetService(typeof(ApplicationSettingsController));

        var DTOSettings = _ApplicationSettingsController.GetSettings("", NavigationManager.BaseUri);
        AllowRegistration = DTOSettings.allowRegistration;
    }

    private async void CreateUser()
    {
        try
        {
            Message = "";

            // Create the user
            RegisterDTO objRegister = new RegisterDTO();
            objRegister.email = strEmail;
            objRegister.userName = strUserName;
            objRegister.firstName = strFirstName;
            objRegister.lastName = strLastName;
            objRegister.password = strPassword;

            // Validate
            if ((objRegister.email.Trim().Length < 1) ||
            (objRegister.userName.Trim().Length < 1) ||
            (objRegister.firstName.Trim().Length < 1) ||
            (objRegister.lastName.Trim().Length < 1) ||
            (objRegister.password.Trim().Length < 1))
            {
                Message = "All fields are required";
                return;
            }

            // RegisterStatus to return
            RegisterStatus objRegisterStatus = new RegisterStatus();
            objRegisterStatus.status = "Registration Failure";
            objRegisterStatus.isSuccessful = false;

            // Create the User
            string strDefaultConnection = _configuration["ConnectionStrings:DefaultConnection"];

            objRegisterStatus = await _RegisterController.RegisterUser(
                objRegister, strDefaultConnection, _HostEnvironment, _UserManager,
                _SignInManager, false, NavigationManager.BaseUri);

            if (!objRegisterStatus.isSuccessful)
            {
                if (objRegisterStatus.requiresVerification)
                {
                    Message = "Account requires verification";
                }
                else
                {
                    Message = objRegisterStatus.status;
                }
                StateHasChanged();
                return;
            }
            else
            {
                UserCreated = true;
                Message = "User Account Created";
                StateHasChanged();
                return;
            }
        }
        catch (Exception ex)
        {
            Message = ex.Message;
            StateHasChanged();
            return;
        }
    }

    void Continue()
    {
        string url = NavigationManager.BaseUri;
        NavigationManager.NavigateTo(url, true);
    }
}
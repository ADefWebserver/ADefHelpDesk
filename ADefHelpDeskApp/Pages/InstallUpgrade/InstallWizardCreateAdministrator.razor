@using Microsoft.AspNetCore.Identity;
@using ADefHelpDeskApp.Data;
@using ADefHelpDeskApp.Data.Models;
@using AdefHelpDeskBase.Models;
@using AdefHelpDeskBase.Models.DataContext;
@using ADefHelpDeskApp.Classes;
@using Microsoft.EntityFrameworkCore
@inject IConfiguration _configuration
@inject UserManager<ApplicationUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject ADefHelpDeskContext _ADefHelpDeskService

<h3>Create Administrator</h3>
<br />
<br />
@if (@ErrorMessage != "")
{
    <h4>@ErrorMessage</h4>
}

<table class="form-group" cellpadding="4" cellspacing="4">
    <tbody>
        <tr>
            <td>
                <label for="Title" class="control-label" style="font-weight: bold">Email Address: </label>
            </td>
            <td>
                <input type="email" id="Username" class="form-control" @bind="strAdministratorUserName" />
            </td>
        </tr>
        <tr>
            <td>
                <label for="Title" class="control-label" style="font-weight: bold">Password: </label>
            </td>
            <td>
                <input type="password" id="Password" class="form-control" @bind="strAdministratorPassword" />
            </td>
        </tr>
        <tr>
            <td>
                <button type="button" label="Create Administrator"
                        class="btn btn-success"
                        @onclick="CreateAdministrator">
                    Create Administrator
                </button>
            </td>
        </tr>
    </tbody>
</table>


@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    // CreateAdministratorChanged is an EventCallback that will
    // notify the parent component CreateAdministrator Is complete
    [Parameter] public EventCallback<bool> CreateAdministratorChanged { get; set; }

    string ErrorMessage = "";
    string ADMINISTRATION_ROLE = "Administrators";
    string strAdministratorUserName = "";
    string strAdministratorPassword = "";

    protected override async Task OnInitializedAsync()
    {
        // Don't allow this to be used if an Administrator already exists
        // Get database conection string
        string strDefaultConnection = _configuration["ConnectionStrings:DefaultConnection"];

        var AdminExists = await AdminExistsAsync(strDefaultConnection);
        if (AdminExists)
        {
            ErrorMessage = "Administrator Already Exists";
            return;
        }
    }

    #region private async void CreateAdministrator()
    private async void CreateAdministrator()
    {
        try
        {
            // ensure there is a ADMINISTRATION_ROLE
            var RoleResult = await _RoleManager.FindByNameAsync(ADMINISTRATION_ROLE);
            if (RoleResult == null)
            {
                // Create ADMINISTRATION_ROLE Role
                await _RoleManager.CreateAsync(new IdentityRole(ADMINISTRATION_ROLE));
            }

            // Create the user
            ApplicationUser objApplicationUser = new ApplicationUser();
            objApplicationUser.UserName = strAdministratorUserName;
            objApplicationUser.DisplayName = strAdministratorUserName;
            objApplicationUser.Email = strAdministratorUserName;
            objApplicationUser.EmailConfirmed = true;

            var UserResult = await _UserManager.CreateAsync(objApplicationUser, strAdministratorPassword);

            if (!UserResult.Succeeded)
            {
                ErrorMessage = "";
                foreach (var item in UserResult.Errors)
                {
                    ErrorMessage = ErrorMessage + " " + item.Description;
                }
                StateHasChanged();
                return;
            }

            var user = await _UserManager.FindByNameAsync(strAdministratorUserName);

            if (user != null)
            {
                // Put admin in Administrator role
                await _UserManager.AddToRoleAsync(user, ADMINISTRATION_ROLE);
            }

            // Notify parent component
            await CreateAdministratorChanged.InvokeAsync(true);
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
            StateHasChanged();
            return;
        }
    }
    #endregion

    #region public async Task<bool> AdminExistsAsync(string strDefaultConnection)
    public async Task<bool> AdminExistsAsync(string strDefaultConnection)
    {
        var optionsBuilder = new DbContextOptionsBuilder<ADefHelpDeskContext>();
        optionsBuilder.UseSqlServer(strDefaultConnection);

        using (var context = new ADefHelpDeskContext(optionsBuilder.Options))
        {
            // Get Admin Role
            var AdminRoleList = await context.AspNetRoles
                    // Use AsNoTracking to disable EF change tracking
                    .AsNoTracking()
                     .Where(x => x.Name.ToLower() == "Administrators")
                     .ToListAsync();

            if (AdminRoleList.Count == 0)
            {
                return false;
            }

            var AdminRole = AdminRoleList.FirstOrDefault();

            // Get number of users in that role
            var UsersInAdminRole = await context.AspNetUserRoles
                // Use AsNoTracking to disable EF change tracking
                .AsNoTracking()
                .Where(x => x.RoleId == AdminRole.Id)
                .CountAsync();

            return (UsersInAdminRole > 0);
        }
    }
    #endregion
}

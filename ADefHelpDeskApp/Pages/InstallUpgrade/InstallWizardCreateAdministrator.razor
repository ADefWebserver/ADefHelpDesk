@using ADefHelpDeskApp.Controllers
@using AdefHelpDeskBase.Controllers
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Hosting;
@using ADefHelpDeskApp.Data;
@using ADefHelpDeskApp.Data.Models;
@using AdefHelpDeskBase.Models;
@using AdefHelpDeskBase.Models.DataContext;
@using ADefHelpDeskApp.Classes;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.AspNetCore.Http;
@using System.IO
@inject IConfiguration _configuration
@inject IWebHostEnvironment _HostEnvironment
@inject UserManager<ApplicationUser> _UserManager
@inject SignInManager<ApplicationUser> _SignInManager
@inject RoleManager<IdentityRole> _RoleManager
@inject ADefHelpDeskContext _ADefHelpDeskService
@inject IHttpContextAccessor httpContextAccessor
@inject HttpClient Http

<h3>Create Administrator</h3>
<br />
<br />

<table class="form-group" cellpadding="4" cellspacing="4">
    <tbody>
         <tr>
            <td>
                <label for="Title" class="control-label" style="font-weight: bold">Username: </label>
            </td>
            <td>
                <input type="email" id="Username" class="form-control" @bind="strAdministratorUserName" />
            </td>
        </tr>
        <tr>
            <td>
                <label for="Title" class="control-label" style="font-weight: bold">First Name: </label>
            </td>
            <td>
                <input type="email" id="FirstName" class="form-control" @bind="strAdministratorFirstName" />
            </td>
        </tr>
        <tr>
            <td>
                <label for="Title" class="control-label" style="font-weight: bold">Last Name: </label>
            </td>
            <td>
                <input type="email" id="LastName" class="form-control" @bind="strAdministratorLastName" />
            </td>
        </tr>
        <tr>
            <td>
                <label for="Title" class="control-label" style="font-weight: bold">Email Address: </label>
            </td>
            <td>
                <input type="email" id="Username" class="form-control" @bind="strAdministratorEmail" />
            </td>
        </tr>
        <tr>
            <td>
                <label for="Title" class="control-label" style="font-weight: bold">Password: </label>
            </td>
            <td>
                <input type="password" id="Password" class="form-control" @bind="strAdministratorPassword" />
            </td>
        </tr>
        <tr>
            <td>
                <button type="button" label="Create Administrator"
                        class="btn btn-success"
                        @onclick="CreateAdministrator">
                    Create Administrator
                </button>
            </td>
        </tr>
    </tbody>
</table>

@if (@ErrorMessage != "")
{
    <h4 style="color:red">@ErrorMessage</h4>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    // CreateAdministratorChanged is an EventCallback that will
    // notify the parent component CreateAdministrator Is complete
    [Parameter] public EventCallback<bool> CreateAdministratorChanged { get; set; }

    string strDefaultConnection = "";
    string _DefaultFilesPath = "";

    string ErrorMessage = "";
    string strAdministratorUserName = "";
    string strAdministratorFirstName = "";
    string strAdministratorLastName = "";
    string strAdministratorEmail = "";
    string strAdministratorPassword = "";

    protected override async Task OnInitializedAsync()
    {
        // Don't allow this to be used if an Administrator already exists
        // Get database conection string
        strDefaultConnection = _configuration["ConnectionStrings:DefaultConnection"];

        var AdminExists = await Task.Run(() => AdminExistsAsync());

        if (AdminExists)
        {
            ErrorMessage = "Administrator Already Exists";
            return;
        }
    }

    private async void CreateAdministrator()
    {
        try
        {
            ErrorMessage = "";

            // Create the user
            RegisterDTO objRegister = new RegisterDTO();
            objRegister.email = strAdministratorEmail;
            objRegister.userName = strAdministratorUserName;
            objRegister.firstName = strAdministratorFirstName;
            objRegister.lastName = strAdministratorLastName;
            objRegister.password = strAdministratorPassword;

            // Validate
            if ((objRegister.email.Trim().Length < 1) ||
            (objRegister.userName.Trim().Length < 1) ||
            (objRegister.firstName.Trim().Length < 1) ||
            (objRegister.lastName.Trim().Length < 1) ||
            (objRegister.password.Trim().Length < 1))
            {
                ErrorMessage = "All fields are required";
                return;
            }

            // RegisterStatus to return
            RegisterStatus objRegisterStatus = new RegisterStatus();
            objRegisterStatus.status = "Registration Failure";
            objRegisterStatus.isSuccessful = false;

            // Create the Administrator
            string strCurrentHostLocation = $"{httpContextAccessor.HttpContext.Request.Scheme}://{httpContextAccessor.HttpContext.Request.Host}{httpContextAccessor.HttpContext.Request.PathBase}";

            RegisterController objRegisterController = new RegisterController(_configuration, _HostEnvironment, _UserManager, _SignInManager, httpContextAccessor);

            objRegisterStatus = await objRegisterController.RegisterUser(
                objRegister, strDefaultConnection, _HostEnvironment, _UserManager, _SignInManager, strCurrentHostLocation, true);

            if (!objRegisterStatus.isSuccessful)
            {
                ErrorMessage = "";
                if (objRegisterStatus.requiresVerification)
                {
                    ErrorMessage = "Account requires verification";
                }
                else
                {
                    ErrorMessage = objRegisterStatus.status;
                }
                StateHasChanged();
                return;
            }

            // Update the created user to be a SuperUser
            DTOStatus objDTOStatus = MakeUserASuperUser(objRegister.userName);

            try
            {
                string strDefaultFilesPath =
                ApplicationSettingsController.GetFilesPath(_DefaultFilesPath, strDefaultConnection);

                // Get GeneralSettings
                GeneralSettings objGeneralSettings = new GeneralSettings(strDefaultConnection);
                objGeneralSettings.UpdateFileUploadPath(strDefaultConnection, strDefaultFilesPath);
            }
            catch
            {
                // Do nothing if this fails
                // Admin can set the file path manually
            }

            // Notify parent component
            await CreateAdministratorChanged.InvokeAsync(true);
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
            StateHasChanged();
            return;
        }
    }

    public bool AdminExistsAsync()
    {
        bool result = false;

        var optionsBuilder = new DbContextOptionsBuilder<ADefHelpDeskContext>();
        optionsBuilder.UseSqlServer(strDefaultConnection);

        using (var context = new ADefHelpDeskContext(optionsBuilder.Options))
        {
            try
            {
                // Get the user
                var objUser = (from user in context.AdefHelpDeskUsers
                               where user.IsSuperUser == true
                               select user).FirstOrDefault();

                if (objUser != null)
                {
                    result = true;
                }
                else
                {
                    result = false;
                }
            }
            catch
            {
                result = false;
            }
        }

        return result;
    }

    private DTOStatus MakeUserASuperUser(string UserName)
    {
        DTOStatus objDTOStatus = new DTOStatus();
        objDTOStatus.Success = true;
        objDTOStatus.StatusMessage = "";

        var optionsBuilder = new DbContextOptionsBuilder<ADefHelpDeskContext>();
        optionsBuilder.UseSqlServer(strDefaultConnection);

        using (var context = new ADefHelpDeskContext(optionsBuilder.Options))
        {
            try
            {
                // Get the user
                var objUser = (from user in context.AdefHelpDeskUsers
                               where user.Username == UserName
                               select user).FirstOrDefault();

                if (objUser != null)
                {
                    // Update them
                    objUser.IsSuperUser = true;
                    context.SaveChanges();
                }
                else
                {
                    objDTOStatus.Success = false;
                    objDTOStatus.StatusMessage = $"Cound not find {UserName} in database";
                }
            }
            catch (Exception ex)
            {
                objDTOStatus.Success = false;
                objDTOStatus.StatusMessage = ex.GetBaseException().Message;
            }
        }

        return objDTOStatus;
    }

    private void CreateDefaultFolder()
    {
        // Set WebRootPath to wwwroot\Files directory
        _HostEnvironment.WebRootPath =
            System.IO.Path.Combine(
                Directory.GetCurrentDirectory(),
                @"wwwroot");

        // We need to create a Files directory if none exists
        // This will be used if the Administrator does not set a Files directory
        // Set WebRootPath to wwwroot\Files directory
        _DefaultFilesPath =
            System.IO.Path.Combine(
                Directory.GetCurrentDirectory(),
                @"wwwroot\Files");

        // Create wwwroot\Files directory if needed
        if (!Directory.Exists(_DefaultFilesPath))
        {
            DirectoryInfo di =
                Directory.CreateDirectory(_DefaultFilesPath);
        }
    }
}
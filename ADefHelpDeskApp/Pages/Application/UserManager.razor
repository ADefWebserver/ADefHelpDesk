@page "/usermanager"
@inherits OwningComponentBase
@using System
@using System.Collections.Generic
@using System.Linq
@using System.Linq.Dynamic.Core
@using Radzen
@using Radzen.Blazor
@using AdefHelpDeskBase.Models
@using AdefHelpDeskBase.Models.DataContext
@using AdefHelpDeskBase.Controllers
@using ADefHelpDeskApp.Models
@using ADefHelpDeskApp.Classes
@using ADefHelpDeskApp.Controllers
@using ADefHelpDeskApp.Controllers.InternalApi
@inject DialogService DialogService
@inject IConfiguration _configuration
@inject UserManagerController _UserManagerController
<h4>User Manager</h4>

@if (@IsSuperAdmin)
{
	@if (@Message != "")
	{
		<h4 style="color:red">@Message</h4>
	}
	<RadzenButton ButtonStyle="ButtonStyle.Primary" Click=@(() => AddUser()) Text="Add" Style="margin-bottom: 10px" />
	<br />
	<div>
		<p><b>Search:</b> <RadzenTextBox @oninput=@(args => RefreshGrid(args.Value.ToString())) /></p>
	</div>
	<RadzenDataGrid @ref="grid" Data="@_userSearchResult.userList" Count="@count"
				TItem="DTOUser" LoadData="@LoadData"
				PageSizeOptions="@pageSizeOptions" 
				AllowPaging="true" AllowSorting="false">
		<Columns>
			<RadzenDataGridColumn Width="80px" TItem="DTOUser" 
							  Property="userId" Title="Edit" Sortable=false Filterable=false>
				<Template Context="data">
					<RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="edit" Click=@(() => EditUser(data)) />
				</Template>
			</RadzenDataGridColumn>
			<RadzenDataGridColumn TItem="DTOUser" Property="userName" Title="Username" Width="200px" />
			<RadzenDataGridColumn TItem="DTOUser" Property="firstName" Title="First Name" Width="200px" />
			<RadzenDataGridColumn TItem="DTOUser" Property="lastName" Title="Last Name" Width="200px" />
			<RadzenDataGridColumn TItem="DTOUser" Property="email" Title="Email" Width="200px" />
			<RadzenDataGridColumn TItem="DTOUser" Property="isSuperUser" Title="isSuperUser" Width="200px" />
		</Columns>
	</RadzenDataGrid>
}
@code {
	[CascadingParameter]
	private Task<AuthenticationState> authenticationStateTask { get; set; }

	System.Security.Claims.ClaimsPrincipal CurrentUser;
	RadzenDataGrid<DTOUser> grid;
	UserSearchResult _userSearchResult = new UserSearchResult();
	IEnumerable<int> pageSizeOptions = new int[] { 1, 10, 20, 30 };

	string strDefaultConnection;

	int count;
	string SearchString = "";
	IEnumerable<DTOUser> colApiSecuritys = new List<DTOUser>();

	public bool IsSuperAdmin = false;
	public string Message = "";

	protected override async Task OnInitializedAsync()
	{
		// Get database conection string
		strDefaultConnection = _configuration["ConnectionStrings:DefaultConnection"];

		// Get the current user
		CurrentUser = (await authenticationStateTask).User;
		DTOUser objDTOUser = UtilitySecurity.UserFromUserName(CurrentUser.Identity.Name, strDefaultConnection);
		IsSuperAdmin = objDTOUser.isSuperUser;

		_UserManagerController = (UserManagerController)ScopedServices.GetService(typeof(UserManagerController));

		LoadGrid();
	}

	void LoadGrid()
	{
		var filter = new LoadDataArgs();
		filter.Skip = 0;
		filter.Top = 10;
		filter.Filter = "";
		filter.OrderBy = "";

		LoadData(filter);
	}

	async Task RefreshGrid(string paramSearch)
	{
		SearchString = paramSearch;
		await grid.Reload();
	}

	void LoadData(LoadDataArgs args)
	{
		try
		{
			Message = "";
			_userSearchResult = _UserManagerController.SearchUsers(
				new SearchParameters() { 
					searchString = SearchString, 
					rowsPerPage = args.Top.Value, 
					pageNumber = args.Skip.Value 
				});

			count = _userSearchResult.totalRows;
		}
		catch (Exception ex)
		{
			Message = ex.GetBaseException().Message;
		}
	}

	async Task AddUser()
	{
		DTOUser NewDTOUser = new DTOUser();
		NewDTOUser.userId = -1;
		await EditUser(NewDTOUser);
	}
	async Task EditUser(DTOUser DTOUser)
	{
		Message = "";

		DTOUser result = await DialogService.OpenAsync<UserEditControl>($"Edit User",
		new Dictionary<string, object>() { { "SelectedDTOUser", DTOUser } },
		new DialogOptions() { Width = "650px" });

		if (result != null)
		{
			await RefreshGrid(SearchString);
		}
	}
}

@page "/tagsadmin"
@inherits OwningComponentBase
@using Excubo.Blazor.TreeViews
@using Radzen
@using Radzen.Blazor
@using ADefHelpDeskApp.Models
@using ADefHelpDeskApp.Classes
@using AdefHelpDeskBase.Models
@using AdefHelpDeskBase.Models.DataContext
@using ADefHelpDeskApp.Controllers
@using ADefHelpDeskApp.Controllers.InternalApi
@using System
@using System.Collections.Generic
@using System.Linq
@using Microsoft.EntityFrameworkCore
@inject IConfiguration _configuration
@inject ADefHelpDeskContext context
@inject CategoryTreeController _CategoryTreeController
@inject CategoryNodesController _CategoryNodesController
@inject CategoryController _CategoryController
@inject NavigationManager NavigationManager
@inject DialogService DialogService
<h3>Tags Admin</h3>

@if (@IsSuperAdmin)
{
    <div>
        <div class="row">
            <div class="col-md-12">
                <TreeView Items="colAllTags"
                      GetChildren="(treenode) => treenode.children">
                    <ItemTemplate Context="treenode">
                        <RadzenIcon Icon="@treenode.Item.collapsedIcon" />
                        <a href="@treenode.Item.label" style="vertical-align: top;"
                       @onclick="@(args => SelectNode(@treenode.Item))"
                       @onclick:preventDefault="true"
                       @onclick:stopPropagation="true">
                            @treenode.Item.label
                        </a>
                    </ItemTemplate>
                </TreeView>
                <div class="row">
                    <div class="col-md-6">
                        <RadzenFieldset Text="@EditLabel" Style="width:500px;">
                            <div class="row">
                                <div class="col-md-4">
                                    <RadzenLabel Text="Node Name" />
                                </div>
                                <div class="col-md-8">
                                    <RadzenTextBox Name="label" @bind-Value=@SelectedTreeNode.label />
                                </div>
                            </div>
                            <br />
                            <div class="row">
                                <div class="col-md-4">
                                    <RadzenLabel Text="Node Parent" />
                                </div>
                                <div class="col-md-8">
                                    <RadzenDropDown AllowClear="true" TValue="String"
                                                Data=colTreelist
                                                ValueProperty="categoryId"
                                                TextProperty="label"
                                                @bind-Value=@SelectedTreeNodeParentId />
                                </div>
                            </div>
                            <br />
                             <div class="row">
                                <div class="col-md-4">
                                    <RadzenLabel Text="Selectable" />
                                </div>
                                <div class="col-md-8">
                                    <RadzenCheckBox TValue="bool" @bind-Value=@SelectedTreeNode.data.selectable />
                                </div>
                            </div>
                            <br />
                                <div class="row">
                                <div class="col-md-4">
                                    <RadzenLabel Text="Requester Visible" />
                                </div>
                                <div class="col-md-8">
                                    <RadzenCheckBox TValue="bool" @bind-Value=@SelectedTreeNode.data.requestorVisible />
                                </div>
                            </div>
                            <br />
                            <div class="row">
                                <div class="col-md-12">
                                    <RadzenButton style="margin: 0 1rem 1rem 0" Click=@(args => OnClick("Save"))
                                              Text="Save" ButtonStyle="ButtonStyle.Secondary" />
                                    <RadzenButton style="margin: 0 1rem 1rem 0" Click=@(args => OnClick("New"))
                                              Text="New" ButtonStyle="ButtonStyle.Success" />
                                    <RadzenButton style="margin-bottom: 16px" Click=@(args => OnClick("Delete"))
                                              Text="Delete" ButtonStyle="ButtonStyle.Danger" />
                                </div>
                            </div>
                        </RadzenFieldset>
                    </div>
                </div>
            </div>
        </div>
    </div>
    @if (@showWaitGraphic)
    {
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
    }
    @if (@Message != "")
    {
        <h4 style="color:red">@Message</h4>
    }
}
else
{
    <p>Must be a Super Administrator</p>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    string strDefaultConnection;

    System.Security.Claims.ClaimsPrincipal CurrentUser;

    List<CategoryDTO> colAllTags = new List<CategoryDTO>();
    List<CategoryDTO> colTreelist = new List<CategoryDTO>();
    string SelectedTreeNodeParentId = "0";
    string EditLabel = "New Node";

    CategoryDTO SelectedTreeNode = new CategoryDTO()
    {
        categoryId = "-1",
        label = "",
        selectable = false,
        children = new List<CategoryDTO>()
    };

    int intCurrentId;

    public bool IsSuperAdmin = false;
    public bool showWaitGraphic = false;
    public string Message = "";

    protected override async Task OnInitializedAsync()
    {
        // Get database conection string
        strDefaultConnection = _configuration["ConnectionStrings:DefaultConnection"];

        // Get the current user
        CurrentUser = (await authenticationStateTask).User;
        DTOUser objDTOUser = UtilitySecurity.UserFromUserName(CurrentUser.Identity.Name, strDefaultConnection);
        IsSuperAdmin = objDTOUser.isSuperUser;

        NodeDetailDTO objNewNodeDetail = new NodeDetailDTO();
        objNewNodeDetail.categoryId = "0";
        objNewNodeDetail.CheckboxChecked = false;
        objNewNodeDetail.selectable = false;
        objNewNodeDetail.requestorVisible = false;
        SelectedTreeNode.data = objNewNodeDetail;

        _CategoryTreeController = (CategoryTreeController)ScopedServices.GetService(typeof(CategoryTreeController));
        _CategoryNodesController = (CategoryNodesController)ScopedServices.GetService(typeof(CategoryNodesController));
        _CategoryController = (CategoryController)ScopedServices.GetService(typeof(CategoryController));

        colAllTags = _CategoryTreeController.GetCategoryTree(false);
        colTreelist = _CategoryNodesController.GetCategoryNodes(SelectedTreeNode);
    }

    // Handle edit node events
    void OnClick(string buttonAction)
    {
        switch (buttonAction)
        {
            case "Save":
                SaveNode();
                break;
            case "New":
                SetNewNode();
                break;
            case "Delete":
                DeleteNode();
                break;
            default:
                break;
        }
    }

    void SelectNode(CategoryDTO selectedNode)
    {
        EditLabel = "Edit Node";
        SelectedTreeNode = selectedNode;

        SelectedTreeNodeParentId = "0";
        if(selectedNode.parentId > 0)
        {
            SelectedTreeNodeParentId = selectedNode.parentId.ToString();
        }

        // Refresh parent dropdown list
        colTreelist = _CategoryNodesController.GetCategoryNodes(SelectedTreeNode);

        StateHasChanged();
    }

    private void SetNewNode()
    {
        EditLabel = "New Node";

        SelectedTreeNode =
            new CategoryDTO()
            {
                categoryId = "-1",
                label = "",
                selectable = false,
                children = new List<CategoryDTO>()
            };

        NodeDetailDTO objNewNodeDetail = new NodeDetailDTO();
        objNewNodeDetail.categoryId = "0";
        objNewNodeDetail.CheckboxChecked = false;
        objNewNodeDetail.selectable = false;
        objNewNodeDetail.requestorVisible = false;
        SelectedTreeNode.data = objNewNodeDetail;

        // Get colTreelist
        colAllTags = _CategoryTreeController.GetCategoryTree(false);
        colTreelist = _CategoryNodesController.GetCategoryNodes(SelectedTreeNode);

        StateHasChanged();
    }

    private void SaveNode()
    {
        if (SelectedTreeNode != null)
        {
            // Set Parent Node
            int? intSelectedParentNode = null;
            if(SelectedTreeNodeParentId != "0")
            {
                intSelectedParentNode = Convert.ToInt32(SelectedTreeNodeParentId);
            }

            if (SelectedTreeNode.categoryId != "0") // Existing Node
            {
                CategoryNode ExistingCategoryNode = new CategoryNode();
                ExistingCategoryNode.Id = Convert.ToInt32(SelectedTreeNode.categoryId);
                ExistingCategoryNode.NodeName = SelectedTreeNode.label;
                ExistingCategoryNode.ParentId = intSelectedParentNode;
                ExistingCategoryNode.Selectable = SelectedTreeNode.data.selectable;
                ExistingCategoryNode.RequestorVisible = SelectedTreeNode.data.requestorVisible;

                var result = _CategoryController.Put(Convert.ToInt32(SelectedTreeNode.categoryId), ExistingCategoryNode);
            }
            else // New Node
            {
                //if (SelectedTreeNode.label.Trim().Length > 0)
                //{
                //    intCurrentId = intCurrentId + 1;

                //    // Add the node
                //    var NewNode = new DataNode()
                //    {
                //        Id = intCurrentId,
                //        label = SelectedTreeNode.label,
                //        IsSelected = false
                //    };

                //    // Set ParentId
                //    if (SelectedTreeNodeParentId == 0)
                //    {
                //        NewNode.ParentId = null;
                //    }
                //    else
                //    {
                //        NewNode.ParentId = SelectedTreeNodeParentId;
                //    }

                //    // Add the new node to colDataNode
                //    colDataNode.Add(NewNode);

                //    // Pass DataNodes to GetTree to get a list of TreeNodes
                //    colAllTags = await TreeUtility.GetTree(colDataNode);

                //    // Get colTreelist
                //    colTreelist = await TreeUtility.GetTreeList(colAllTags, SelectedTreeNode);

                // Clear the SelectedTreeNode
                //EditLabel = "New Node";

                //SelectedTreeNode =
                //    new CategoryDTO()
                //    {
                //        categoryId = "-1",
                //        label = "",
                //        selectable = false,
                //        children = new List<CategoryDTO>()
                //    };

                //NodeDetailDTO objNewNodeDetail = new NodeDetailDTO();
                //objNewNodeDetail.categoryId = "0";
                //objNewNodeDetail.CheckboxChecked = false;
                //objNewNodeDetail.selectable = false;
                //objNewNodeDetail.requestorVisible = false;
                //SelectedTreeNode.data = objNewNodeDetail;
            }
        }

        colAllTags = _CategoryTreeController.GetCategoryTree(false);
        colTreelist = _CategoryNodesController.GetCategoryNodes(SelectedTreeNode);

        StateHasChanged();
    }

    private void DeleteNode()
    {

        StateHasChanged();
    }
}
@page "/userassignmentroles"
@inherits OwningComponentBase
@using Radzen
@using Radzen.Blazor
@using ADefHelpDeskApp.Models
@using ADefHelpDeskApp.Classes
@using AdefHelpDeskBase.Models
@using AdefHelpDeskBase.Models.DataContext
@using ADefHelpDeskApp.Controllers
@using ADefHelpDeskApp.Controllers.InternalApi
@using System
@using System.Collections.Generic
@using System.Linq
@using Microsoft.EntityFrameworkCore
@using System.Linq.Dynamic.Core
@inject IConfiguration _configuration
@inject ADefHelpDeskContext context
@inject RoleController _RoleController

@inject NavigationManager NavigationManager
@inject DialogService DialogService
<h3>Roles</h3>
@if (@IsSuperAdmin)
{
	<RadzenDataGrid Data="@colRoles" Count="@count" LoadData="@LoadData" TItem="RoleDTO"
				AllowVirtualization="true" Style="height:400px"
				AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
				LogicalFilterOperator="LogicalFilterOperator.Or"
				AllowSorting="true">
		<Columns>
			<RadzenDataGridColumn TItem="RoleDTO" Property="roleName" Title="roleName" />
		</Columns>
	</RadzenDataGrid>
}
@code {
	[CascadingParameter]
	private Task<AuthenticationState> authenticationStateTask { get; set; }

	string strDefaultConnection;
	System.Security.Claims.ClaimsPrincipal CurrentUser;

	int count;
	IEnumerable<RoleDTO> colRoles = new List<RoleDTO>();

	public bool IsSuperAdmin = false;
	public bool showWaitGraphic = false;
	public string Message = "";

	protected override async Task OnInitializedAsync()
	{
		// Get database conection string
		strDefaultConnection = _configuration["ConnectionStrings:DefaultConnection"];

		// Get the current user
		CurrentUser = (await authenticationStateTask).User;
		DTOUser objDTOUser = UtilitySecurity.UserFromUserName(CurrentUser.Identity.Name, strDefaultConnection);
		IsSuperAdmin = objDTOUser.isSuperUser;

		_RoleController = (RoleController)ScopedServices.GetService(typeof(RoleController));
		var filter = new LoadDataArgs();
		filter.Skip = 0;
		filter.Top = 10;
		filter.Filter = "";
		filter.OrderBy = "";

		LoadData(filter);
	}

	void LoadData(LoadDataArgs args)
	{
		var query = _RoleController.GetRoles().AsQueryable();

		if (!string.IsNullOrEmpty(args.Filter))
		{
			query = query.Where(args.Filter);
		}

		if (!string.IsNullOrEmpty(args.OrderBy))
		{
			query = query.OrderBy(args.OrderBy);
		}

		colRoles = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();

		count = _RoleController.GetRoles().Count();
	}
}

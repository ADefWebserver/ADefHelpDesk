@page "/userassignmentroles"
@inherits OwningComponentBase
@using Radzen
@using Radzen.Blazor
@using ADefHelpDeskApp.Models
@using ADefHelpDeskApp.Classes
@using AdefHelpDeskBase.Models
@using AdefHelpDeskBase.Models.DataContext
@using ADefHelpDeskApp.Controllers
@using ADefHelpDeskApp.Controllers.InternalApi
@using System
@using System.Collections.Generic
@using System.Linq
@using Microsoft.EntityFrameworkCore
@using System.Linq.Dynamic.Core
@inject IConfiguration _configuration
@inject ADefHelpDeskContext context
@inject RoleController _RoleController
@inject NavigationManager NavigationManager
@inject DialogService DialogService
<h3>Roles</h3>
@if (@IsSuperAdmin)
{
	@if (@Message != "")
	{
		<h4 style="color:red">@Message</h4>
	}
	<RadzenButton ButtonStyle="ButtonStyle.Primary" Click=@(() => AddRole()) Text="Add" /> 
	<br /><br />
	<RadzenDataGrid Data="@colRoles" Count="@count" LoadData="@LoadData" TItem="RoleDTO"
				AllowVirtualization="false" Style="height:400px"
				AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
				LogicalFilterOperator="LogicalFilterOperator.Or"
				AllowSorting="true">
		<Columns>
			<RadzenDataGridColumn Width="80px" TItem="RoleDTO" Property="iD" Title="Edit" Sortable=false Filterable=false>
				<Template Context="data">
					<RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="edit" Click=@(() => EditRole(data)) />
				</Template>
			</RadzenDataGridColumn>
			<RadzenDataGridColumn TItem="RoleDTO" Property="roleName" Title="roleName" />
		</Columns>
	</RadzenDataGrid>
}
@code {
	[CascadingParameter]
	private Task<AuthenticationState> authenticationStateTask { get; set; }

	string strDefaultConnection;
	System.Security.Claims.ClaimsPrincipal CurrentUser;

	int count;
	IEnumerable<RoleDTO> colRoles = new List<RoleDTO>();

	public bool IsSuperAdmin = false;
	public bool showWaitGraphic = false;
	public string Message = "";

	protected override async Task OnInitializedAsync()
	{
		// Get database conection string
		strDefaultConnection = _configuration["ConnectionStrings:DefaultConnection"];

		// Get the current user
		CurrentUser = (await authenticationStateTask).User;
		DTOUser objDTOUser = UtilitySecurity.UserFromUserName(CurrentUser.Identity.Name, strDefaultConnection);
		IsSuperAdmin = objDTOUser.isSuperUser;

		_RoleController = (RoleController)ScopedServices.GetService(typeof(RoleController));

		RefreshGrid();
	}

	void RefreshGrid()
	{
		var filter = new LoadDataArgs();
		filter.Skip = 0;
		filter.Top = 100;
		filter.Filter = "";
		filter.OrderBy = "";

		LoadData(filter);
	}

	void LoadData(LoadDataArgs args)
	{
		var query = _RoleController.GetRoles().AsQueryable();

		if (!string.IsNullOrEmpty(args.Filter))
		{
			query = query.Where(args.Filter);
		}

		if (!string.IsNullOrEmpty(args.OrderBy))
		{
			query = query.OrderBy(args.OrderBy);
		}

		colRoles = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();

		count = _RoleController.GetRoles().Count();
	}

	async Task AddRole()
	{
		var NewRoleDTO = new RoleDTO();
		NewRoleDTO.iD = 0;
		NewRoleDTO.portalID = -1;
		NewRoleDTO.roleName = "";

		await EditRole(NewRoleDTO);
	}

	async Task EditRole(RoleDTO Role)
	{
		Message = "";
		var result = await DialogService.OpenAsync("Edit Role", ds =>
		@<div>
			<p Style="margin-bottom: 1rem"><RadzenTextBox Name="Role" @bind-Value=Role.roleName /></p>
			<div class="row">
				<div class="col-md-12">
					<RadzenButton Text="Save" Click="() => ds.Close(true)" ButtonStyle="ButtonStyle.Success" Style="margin-bottom: 10px; width: 150px" />
					@if (Role.iD > 0) // can only delete existing nodes
					{
					  <RadzenButton Text="Delete" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Danger" Style="margin-bottom: 10px; width: 150px" />
					}
					</div>
				</div>
			</div> );

		switch (result)
		{
			case true:
				// Save
				if (Role.iD > 0) // Existing Record
				{
					var UpdateResult = _RoleController.Put(Role.iD, Role);
					if(!UpdateResult.Success)
					{
						Message = UpdateResult.StatusMessage;
					}
					else
					{
						RefreshGrid();
					}
				}
				else // New Record
				{
					var InsertResult = _RoleController.Post(Role);
					RefreshGrid();
				}
				break;
			case false:
				// Delete
				var DeleteResult = _RoleController.Delete(Role.iD);
				if(!DeleteResult.Success)
				{
					Message = DeleteResult.StatusMessage;
				}
				else
				{
					RefreshGrid();
				}
				break;
			default:
				break;
		};

	}
}